{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to <code>pysb-pkpd</code>'s Documentation","text":"<p>pysb-pkpd: program and simulate dynamic PK/PD and QSP models in Python using the PySB modeling framework</p>"},{"location":"#overview","title":"Overview","text":"<p><code>pysb-pkpd</code> is a domain-specific extension to the PySB modeling framework that facilitates programming and simulating dynamic pharmacokinetic/pharmacodynamic (PK/PD) and quantitative systems pharmacology (QSP) models in Python. </p>"},{"location":"#key-features","title":"Key Features","text":"<p><code>pysb-pkpd</code> has the following key features:</p> <ul> <li>Domain-specific PySB macros - set of domain-specific PySB macros that facilitate the efficient and descriptive programmatic construction of compartmental PK/PD models.</li> <li>Standard one-, two-, and three-compartment model generators - functions to quickly and easily construct standard one-, two-, and three-compartment PK/PD models.</li> </ul>"},{"location":"#why-use-pysb-pkpd","title":"Why Use <code>pysb-pkpd</code>?","text":"<p>Built on PySB, a powerful programmatic and rule-based framework for biochemical modeling, <code>pysb-pkpd</code> offers a variety of benefits, including:</p> <ul> <li>Programmatic Modeling \u2013 Enables automated workflows, reproducibility (e.g., version control and automated testing), customization, and creation of reusable functions for pharmacological and biochemical processes.</li> <li>Built-in Support for Mechanistic Modeling \u2013 Leverage PySB's mechanistic modeling framework to incorporate additional biochemical mechanisms and build customized mechanistic PK/PD and QSP/QST models.</li> <li>Rule-Based Approach \u2013 Encode complex pharmacological and biochemical processes using intuitive rule-based modeling. No need to enumerate all reactions/molecular species or manually encode the corresponding network of differential equations.</li> <li>Python-Based \u2013 Seamlessly integrates with Python\u2019s scientific computing ecosystem, supporting advanced simulations, data analysis, and visualization.</li> <li>Arbitrary Number of Compartments \u2013 Specify any number of compartments to build custom multi-compartment models, including complex drug distribution and physiologically-based pharmacokinetic (PBPK) models.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Install PySB using conda or mamba:     <pre><code>conda install -c alubbock pysb\n</code></pre> OR <pre><code>mamba install -c alubbock pysb\n</code></pre></li> <li>Install pysb-pkpd with pip:     <pre><code>pip install pysb-pkpd\n</code></pre> Ensure you have Python 3.11.3+ and PySB 1.15.0+ installed.</li> </ol>"},{"location":"#quick-start-example","title":"Quick-start Example","text":""},{"location":"#1-using-model-generator-function-quick-and-easy-standard-model-construction","title":"1. Using model generator function (quick and easy standard model construction)","text":"<p>Here\u2019s a simple workflow to define and simulate a one-compartment PK model with an Emax PD function using the model generator functions:</p> <pre><code>from pysb.pkpd import standard, util\n\n# Define a simple one-compartment model\nmodel = standard.one_compartment_model(dose_amount=100,\n                                       dose_route='iv-bolus',\n                                       volume_distribution=10.,\n                                       clearance=0.5,\n                                       pd_model={'emax':\n                                           {'emax':2.2,\n                                            'ec50': 225.8}\n                                       }\n                                       )\n# Simulate concentration over time\nsimulation_results = util.simulate(model, \n                                   tspan=list(range(100)),\n                                  )\n</code></pre>"},{"location":"#2-using-pkpd-model-macros-flexible-and-customizable-programmatic-model-definition","title":"2. Using PK/PD model macros (flexible and customizable programmatic model definition)","text":"<p>Here\u2019s a simple workflow to define and simulate the same one-compartment PK model with an Emax PD function (same as above) using the PK/PD macros inside a model module file:</p> <ol> <li>Define <code>model.py</code> with the following code (the model is a Python module in this case): <pre><code>from pysb import Model\nimport pysb.pkpd as pkpd\n\n# Initialize the PySB model:\nModel()\n\n# Add a Monomer for the drug:\npkpd.drug_monomer(name='Drug')\n\n# Add the compartment for a one-compartment model:\npkpd.one_compartment(c1_name=\"CENTRAL\",\n                             c1_size=10.)\n\n# Add a dose of the drug using an \n# instantaneous 'bolus' dose in the central\n# compartment (initial amount of drug at time zero).\n#   Note that dose is an amount such as weight, mass, or moles,\n#     which will be converted automatically to an initial concentration\n#     as: \n#         [Drug]_0 = dose / V_CENTRAL , \n#     where V_CENTRAL is the size (i.e., volume) of the central compartment.\npkpd.dose_bolus(Drug, CENTRAL, dose=100.)\n\n# Include (linear) systemic clearance of Drug from the central compartment.\npkpd.clearance(Drug, CENTRAL, cl=0.5)\n\n# Add the Emax PD function for Drug in the\n# central compartment:\npkpd.emax(Drug, CENTRAL, emax=2.2,\n                         ec50=225.8)\n</code></pre></li> <li>Import and simulate the model: <pre><code>from model import model\nfrom pysb.pkpd import util\n\n# Simulate concentration over time\nsimulation_results = util.simulate(model, \n                                   tspan=list(range(100)),\n                                  )\n</code></pre></li> </ol>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Special thanks for Martin Breuss's MkDocs tuorial.</p>"},{"location":"citing/","title":"Citing","text":"<p>If you use <code>pysb-pkpd</code> in your research, publications, or projects, we kindly ask that you cite it!</p> <p>APA:</p> <p>Blake, W., (2025). pysb-pkpd (Version 0.5.0) [Computer software]. https://doi.org/10.5281/zenodo.12775530</p> <p>BibTex:</p> <pre><code>@software{Blake_pysb-pkpd_2024,\nauthor = {Blake, Wilson},\ndoi = {10.5281/zenodo.12775530},\nlicense = {BSD-2-Clause},\ntitle = {{pysb-pkpd}},\nurl = {https://github.com/blakeaw/pysb-pkpd},\nversion = {0.5.0},\nyear = {2025}\n}\n</code></pre>"},{"location":"contact-support/","title":"Contact &amp; Support","text":"<p>Feel to reach out through the following channels:</p> <ul> <li>Issues  : Please open a GitHub Issue to report any problems/bugs with the code or its execution, or to make any feature requests.</li> <li>Discussions  : If you have questions, suggestions, or want to discuss anything else related to the project, feel free to use the pysb-pkpd Discussions board.</li> <li>Support  : For any other support inquiries you can reach out in the Support room of our Gitter chat: .</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Development is centered around the pysb-pkpd GitHub project page.</p>"},{"location":"contributing/#getting-involved","title":"Getting Involved","text":"<p>Here\u2019s are a couple of non-code ways you can get involved:</p> <ul> <li>Issues  : Please open a GitHub Issue to report any problems/bugs with the code or its execution, or to make any feature requests.</li> <li>Discussions  : If you have questions, suggestions, or want to discuss anything else related to the project, feel free to use the pysb-pkpd Discussions board.</li> </ul>"},{"location":"contributing/#contributing-code","title":"Contributing Code","text":"<p>Contributions are welcomed! If you\u2019d like to improve <code>pysb-pkpd</code>, see the Contributing Guide.</p>"},{"location":"contributing/#sharing-models","title":"Sharing Models","text":"<p>Developed a model using <code>pysb-pkpd</code>? Feel free to share it with us in this GitHub Discussion! </p>"},{"location":"contributing/#acknowledgments","title":"Acknowledgments","text":"<p>We appreciate every contributor\u2019s efforts, as well as the feedback of our users! </p>"},{"location":"how-to-guides/","title":"How-To Guides","text":""},{"location":"how-to-guides/#how-to-simulate-a-model","title":"How to Simulate a Model","text":"<p><code>pysb-pkpd</code> provides a <code>simulate</code> function that can be used to easily  execute a dynamic ODE-based simulation of your PK/PD model as below:</p> <pre><code>import numpy as np\nimport pysb.pkpd as pkpd\nfrom my_pkpd_model import model\n\n# Simulate the PKPD/PySB model.\n## Set the timespan for the simulation:\ntspan = np.arange(241) # 0-240 seconds at 1 second intervals\n## Execute the simulation:\nsimulation_trajectory = pkpd.simulate(model, tspan)\n</code></pre>"},{"location":"how-to-guides/#how-to-incorporate-and-manage-units-in-models","title":"How to Incorporate and Manage Units in Models","text":"<p>PySB doesn't natively support incorporating and managing units in models, however, we've developed another extension package that adds these features: pysb-units.</p> <p>You can install this add-on using pip: <pre><code>pip install git+https://github.com/Borealis-BioModeling/pysb-units@v0.4.0\n</code></pre></p> <p>Then, we can define a pretty minimal example with a one-compartment PK model (<code>model.py</code>):</p> <pre><code># Import the pysb components:\nfrom pysb import Model, Parameter, Monomer, Initial, Observable, Expression\n# Import the pysb-pkpd macros module:\nfrom pysb.pkpd import macros as pkpd\n# Import pysb-units:\nimport pysb.units\n# Import the pysb-units context manager:\nfrom pysb.units import units\n\n# Add the units features to the pkpd.macros module:\npysb.units.add_macro_units(pkpd)\n\n# Activate units using the units context manager - \n# replaces core model components with the appropriate \n# versions from pysb.units (similar to unitize) and will \n# automatically call the check function when exiting the\n# context:\nwith units():\n\n    # Initialize the PySB model:\n    Model()\n\n    # The primary units needed for simulating the model are \n    # concentration (or amount) and time. We can define those\n    # here with SimulationUnits:\n    SimulationUnits(concentration='mg/L', time='h', volume='L')\n\n    # Add a Monomer for the drug:\n    pkpd.drug_monomer(name='Drug')\n\n    # Add the compartment for a one-compartment model:\n    Parameter('Vd', 10., unit='L') # Volume of Distribution\n    pkpd.one_compartment(c1_name=\"CENTRAL\",\n                                c1_size=Vd)\n\n    # Add a dose of the drug using an \n    # instantaneous 'bolus' dose in the central\n    # compartment (initial amount of drug at time zero).\n    #   Note that dose is an amount such as weight, mass, or moles,\n    #     which will be converted automatically to an initial concentration\n    #     as: \n    #         [Drug]_0 = dose / V_CENTRAL , \n    #     where V_CENTRAL is the size (i.e., volume) of the central compartment.\n    Parameter('Dose', 100., unit='mg') # Dose amount\n    pkpd.dose_bolus(Drug, CENTRAL, dose=Dose)\n\n    # Include (linear) systemic clearance of Drug from the central compartment.\n    Parameter('CL', 0.5, unit='L/h') # Clearance rate\n    pkpd.clearance(Drug, CENTRAL, cl=CL)\n</code></pre> <p>Note that we define each model parameter and then pass that in to the <code>pkpd</code> macros. This allows us to specify the units of each parameter. </p>"},{"location":"how-to-guides/#page-still-under-development","title":"\ud83d\udea7 Page Still Under Development \ud83d\udea7","text":"<p>Thank you for your interest in our How-To Guides section! We\u2019re actively working on expanding these pages to provide step-by-step instructions and hands-on examples for using <code>pysb-pkpd</code>.</p> <p>Our goal is to make these resources clear, practical, and easy to follow\u2014but we\u2019re still in the process of gathering content and refining details.</p> <p>Stay tuned! In the meantime:</p> <ul> <li>Have a specific question? Feel free to explore our existing documentation or reach out to the community.</li> <li>Want to contribute? If you have suggestions or example workflows, we'd love to hear from you!</li> </ul> <p>Check back soon for updates as we continue to improve these guides!</p>"},{"location":"license/","title":"BSD 2-Clause License","text":"<p>Copyright (c) 2023, Blake A. Wilson</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"macros/","title":"Available PK/PD macros","text":"<p>The following PySB-style macro functions encoding key PK, PD, and dosing processes are available for model construction:</p>"},{"location":"macros/#pk-functions","title":"PK functions","text":"<ul> <li><code>drug_monomer</code> - adds a simple monomer species for the drug to the model. If the drug needs binding sites or other state variables then you should directly use the PySB <code>Monomer</code> class instead. API Reference</li> <li><code>one_compartment</code> - adds one compartment to the model for a one-comaprtment PK model. Alternatively, it could be used to add a new compartment to a multi-compartment model. API Reference</li> <li><code>two_compartments</code> - adds two compartments to the model for a two-comaprtment PK model. API Reference</li> <li><code>three_compartments</code> - adds three compartments to the model for a three-compartment PK model. API Reference</li> <li><code>eliminate</code> - adds linear (1st-order) elimination of the specified drug/species from a compartment. API Reference</li> <li><code>eliminate_mm</code> - add non-linear, Michaelis-Menten, elimination of the specified drug/species from a compartment. API Reference</li> <li><code>clearance</code> - adds linear (1st-order) elimination of the specified drug/species from a compartment by systemic clearance. API Reference</li> <li><code>distribute</code> - adds distribution/redistribution of the specified drug/species between two compartments. API Reference</li> <li><code>transfer</code> - adds one-way transfer (distribution with no redistribution) of the specified drug/species from one compartment to another. API Reference</li> </ul>"},{"location":"macros/#pd-functions","title":"PD functions","text":"<ul> <li><code>emax</code> - Adds an Emax model expression for the specified drug/species in a given compartment. Generates a PySB Expression with name: 'Emax_expr_DrugName_CompartmentName'. API Reference.  Equation: $$ E = E_{\\textrm{max}} \\frac{\\left[\\textrm{Drug}\\right]}{\\left[\\textrm{Drug}\\right] + EC_{\\textrm{50}}} $$</li> <li><code>sigmoidal_emax</code> - Adds a sigmoidal Emax model expression for the specified drug/species in a given compartment. Generates a PySB Expression with name: 'Emax_expr_DrugName_CompartmentName'. API Reference. Equation: $$ E = E_{\\textrm{max}} \\frac{\\left[\\textrm{Drug}\\right]^n}{\\left[\\textrm{Drug}\\right]^n + EC_{\\textrm{50}}^n} $$</li> <li><code>linear_effect</code> - Adds a linear effect model expression for the specified drug/specis in a given compartment. Generates a PySB Expression with name: 'LinearEffect_expr_DrugName_CompartmentName'. API Reference. Equation: $$ E = m \\left[\\textrm{Drug}\\right] + b $$</li> <li><code>loglinear_effect</code> - Adds a log-linear effect model expression for the specified drug/specis in a given compartment. Generates a PySB Expression with name: 'LogLinearEffect_expr_DrugName_CompartmentName'. API Reference. Equation: $$ E = m \\log(\\left[\\textrm{Drug}\\right]) + b $$</li> <li><code>fixed_effect</code> - Adds a fixed-effect model expression for the specified drug/species in a given compartment. Generates a PySB Expression with name: 'FixedEffect_expr_DrugName_CompartmentName'. API Reference. Equation: $$ E = E_{\\textrm{fixed}} \\, \\, , \\, \\left[\\textrm{Drug}\\right] &gt; C_{\\textrm{threshold}} $$ $$ E = 0  \\, \\, , \\, \\left[\\textrm{Drug}\\right] \\leq C_{\\textrm{threshold}} $$</li> </ul>"},{"location":"macros/#dosing-functions","title":"Dosing functions","text":"<ul> <li><code>dose_bolus</code> - adds an instantaneous bolus dose of the specified drug/species which defines the initial concentration at time zero; e.g., to model IV bolus.</li> <li><code>dose_infusion</code> - adds a continous (zero-order) infusion of the specified drug/species; e.g., to model continuous IV infusion. </li> <li><code>dose_absorbed</code> - adds a dose of the specified drug which is absorbed into the specified compartment via first-order kinetics, including a bioavailibity factor; e.g., to model oral dosing or a subcutaneous depot. </li> </ul> <p>For additional details on each function see the macros API Reference.</p>"},{"location":"macros/#example","title":"Example","text":"<p>Building a two-compartment PK model with a sigmoidal Emax PD function:</p> <pre><code>from pysb import Model\nimport pysb.pkpd as pkpd\n\n# Initialize the PySB model:\nModel()\n\n# Add a Monomer for the drug:\npkpd.drug_monomer(name='Drug')\n\n# Add the compartments for a two-compartment model:\npkpd.two_compartments(c1_name=\"CENTRAL\",\n                             c1_size=2.0,\n                             c2_name=\"PERIPHERAL\",\n                             c2_size=1.0)\n\n\n# Add a dose of the drug using an \n# instantaneous 'bolus' dose in the central\n# compartment (initial amount of drug at time zero).\n#   Note that dose is an amount such as weight, mass, or moles,\n#     which will be converted automatically to an initial concentration\n#     as: \n#         [Drug]_0 = dose / V_CENTRAL , \n#     where V_CENTRAL is the size (i.e., volume) of the central compartment.\npkpd.dose_bolus(Drug, CENTRAL, dose=100.)\n\n# Add (1st order) distribution and re-distribution between the \n# central and peripheral compartments:\n#    Note that klist is [k_distribute, k_redistribute]\npkpd.distribute(Drug, CENTRAL, PERIPHERAL, klist=[1.0, 1e-1])\n\n# Include linear elimination of Drug from the central compartment \n# by processes like metabolism and renal excretion.\npkpd.eliminate(Drug, CENTRAL, kel=1e-2)\n\n# Add the sigmoidal Emax PD function for Drug in the\n# central compartment:\npkpd.sigmoidal_emax(Drug, CENTRAL, emax=1.,\n                                   ec50=10.,\n                                   n=1.7)\n</code></pre>"},{"location":"pkpd-modeling/","title":"What is PK/PD Modeling?","text":"<p>Pharmacokinetics (PK) describes the processes that affect drug concentration in the body through processes like absorption, distribution, metabolism and excretion (ADME). Pharmacodynamics (PD) characterizes the relationship between drug concentration (or dose) and the resulting pharmacological effect. That is, PK describes what the body does to a drug while PD describes what a drug does to the body. PK/PD modeling integrates PK and PD to describe how the pharmacological effect of a drug changes over time, using mathematical models to capture the relationships between PK and PD.</p> <p>With PK/PD modeling, researchers can:</p> <ul> <li>Predict drug concentration over time.</li> <li>Assess drug efficacy and safety.</li> <li>Optimize dosing strategies.</li> <li>Compare different compounds or formulations.</li> </ul>"},{"location":"reference/","title":"API Reference","text":""},{"location":"reference/#pkpd.macros","title":"<code>pkpd.macros</code>","text":""},{"location":"reference/#pkpd.macros.clearance","title":"<code>clearance(species, compartment, cl)</code>","text":"<p>Generate a reaction for the systemic clearance of a species from a compartment.</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species undergoing linear elimination. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment from which the species is being lost.</p> required <code>cl</code> <code>Parameters or number</code> <p>Clearance rate in volume/time. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the unidirectional clearance Rule, an Expression for the conversion of the clearance rate to a unidirectional  rate constant, and optionally a Parameter if cl was given as a number.</p> <p>Examples:</p> <p>Linear elimination all Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('CENTRAL')\nMonomer('Drug')\nclearace(Drug, CENTRAL, 1.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; clearance(Drug, CENTRAL, 1.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Rule('clearance_Drug_CENTRAL', Drug() ** CENTRAL &gt;&gt; None, k_CL_expr_Drug_CENTRAL),\n Expression('k_CL_expr_Drug_CENTRAL', CL_Drug_CENTRAL/V_CENTRAL),\n Parameter('CL_Drug_CENTRAL', 1.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def clearance(species, compartment, cl):\n    \"\"\"\n    Generate a reaction for the systemic clearance of a species from a compartment.\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species undergoing linear elimination. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment from which the species is being lost.\n    cl : Parameters or number\n        Clearance rate in volume/time. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the unidirectional clearance Rule,\n        an Expression for the conversion of the clearance rate to a unidirectional \n        rate constant, and optionally a Parameter if cl was given as a number.\n\n    Examples\n    --------\n    Linear elimination all Drug in the Central compartment::\n\n        Model()\n        Compartment('CENTRAL')\n        Monomer('Drug')\n        clearace(Drug, CENTRAL, 1.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; clearance(Drug, CENTRAL, 1.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Rule('clearance_Drug_CENTRAL', Drug() ** CENTRAL &gt;&gt; None, k_CL_expr_Drug_CENTRAL),\n         Expression('k_CL_expr_Drug_CENTRAL', CL_Drug_CENTRAL/V_CENTRAL),\n         Parameter('CL_Drug_CENTRAL', 1.0),\n        ])\n\n    \"\"\"\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    def clearance_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, comp_name])\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    CL = cl\n    if not isinstance(CL, Parameter):\n        CL = Parameter(\"CL_{0}_{1}\".format(monomer_name, comp_name), cl)\n        params_created.add(CL)\n    Vcomp = compartment.size\n    k_expr = Expression(\"k_CL_expr_{0}_{1}\".format(monomer_name, comp_name), CL / Vcomp)\n    expr_components = ComponentSet([k_expr])\n    components = pysb.macros._macro_rule(\n        \"clearance\", species &gt;&gt; None, [k_expr], [\"k\"], name_func=clearance_name_func\n    )\n    components |= expr_components\n    return components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.distribute","title":"<code>distribute(species, c1, c2, klist)</code>","text":"<p>Generate the unimolecular reversible equilibrium reaction to distribute/redistribute the species between the two compartments: species ** c1 &lt;-&gt; species ** c2.</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>Monomer or MonomerPattern</code> required <code>c1</code> <code>Compartment</code> required <code>c2</code> <code>Compartment</code> required <code>klist</code> <code>list of 2 Parameters or list of 2 numbers</code> <p>Forward (S1 -&gt; S2) and reverse rate constants (in that order). If Parameters are passed, they will be used directly in the generated Rules. If numbers are passed, Parameters will be created with automatically generated names based on the names and states of S1 and S2 and these parameters will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains one reversible Rule and optionally two Parameters if klist was given as plain numbers.</p> <p>Examples:</p> <p>Distribution/redistribution of Drug between the CENTRAL and PERIPHERAL compartments::</p> <pre><code>Model()\nMonomer('Drug')\nCompartment(\"CENTRAL\")\nCompartment(\"PERIPHERAL\")\ndistribute(Drug, CENTRAL, PERIPHERAL, [1, 1])\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment(\"CENTRAL\")\nCompartment(name='CENTRAL', parent=None, dimension=3, size=1.),\n&gt;&gt;&gt; Compartment(\"PERIPERAL\")\nCompartment(name='PERIPHERAL', parent=None, dimension=3, size=1.),        \n&gt;&gt;&gt; distribute(Drug, CENTRAL, PERIPHERAL [1, 1]) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Rule('distribute_Drug_CENTRAL_to_PERIPHERAL', Drug() ** CENTRAL | Drug() ** PERIPHERAL, distribute_Drug_CENTRAL_to_PERIPHERAL_kf, distribute_Drug_CENTRAL_to_PERIPHERAL_kr),\n Parameter('distribute_Drug_CENTRAL_to_PERIPHERAL_kf', 1.0),\n Parameter('distribute_Drug_CENTRAL_to_PERIPHERAL_kr', 1.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def distribute(species, c1, c2, klist):\n    \"\"\"\n    Generate the unimolecular reversible equilibrium reaction\n    to distribute/redistribute the species between the two compartments:\n    species ** c1 &lt;-&gt; species ** c2.\n\n    Parameters\n    ----------\n    species : Monomer or MonomerPattern\n    c1 : Compartment\n    c2 : Compartment\n    klist : list of 2 Parameters or list of 2 numbers\n        Forward (S1 -&gt; S2) and reverse rate constants (in that order). If\n        Parameters are passed, they will be used directly in the generated\n        Rules. If numbers are passed, Parameters will be created with\n        automatically generated names based on the names and states of S1 and S2\n        and these parameters will be included at the end of the returned\n        component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains one reversible Rule and optionally\n        two Parameters if klist was given as plain numbers.\n\n    Examples\n    --------\n    Distribution/redistribution of Drug between the CENTRAL and PERIPHERAL compartments::\n\n        Model()\n        Monomer('Drug')\n        Compartment(\"CENTRAL\")\n        Compartment(\"PERIPHERAL\")\n        distribute(Drug, CENTRAL, PERIPHERAL, [1, 1])\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment(\"CENTRAL\")\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=1.),\n        &gt;&gt;&gt; Compartment(\"PERIPERAL\")\n        Compartment(name='PERIPHERAL', parent=None, dimension=3, size=1.),        \n        &gt;&gt;&gt; distribute(Drug, CENTRAL, PERIPHERAL [1, 1]) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Rule('distribute_Drug_CENTRAL_to_PERIPHERAL', Drug() ** CENTRAL | Drug() ** PERIPHERAL, distribute_Drug_CENTRAL_to_PERIPHERAL_kf, distribute_Drug_CENTRAL_to_PERIPHERAL_kr),\n         Parameter('distribute_Drug_CENTRAL_to_PERIPHERAL_kf', 1.0),\n         Parameter('distribute_Drug_CENTRAL_to_PERIPHERAL_kr', 1.0),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n\n    # turn any Monomers into MonomerPatterns\n    def distribute_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, c1.name, \"to\", c2.name])\n\n    s1 = _check_for_monomer(species, c1)\n    s2 = _check_for_monomer(species, c2)\n    return pysb.macros._macro_rule(\n        \"distribute\", s1 | s2, klist, [\"kf\", \"kr\"], name_func=distribute_name_func\n    )\n</code></pre>"},{"location":"reference/#pkpd.macros.dose_absorbed","title":"<code>dose_absorbed(species, compartment, dose, ka, f)</code>","text":"<p>A dose that is absorbed into the compartment via first order kinetics with a given bioavailability.</p> <p>Note that <code>species</code> is not required to be \"concrete\". The dose should be given in  amount such as weight, mass, or moles.</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species to set with Initial. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment to which the species is added.</p> required <code>dose</code> <code>Parameter or number</code> <p>The bolus dose amount. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>ka</code> <code>Parameter or number</code> <p>The first-order kinetic rate parameter for the absorption process. Units should be amount/time.</p> required <code>f</code> <code>Parameter or number</code> <p>The bioavailability of the drug/species (fraction 0 to 1).</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the unidirectional absorption Rule, an  expression for the effective rate (ka * f), and optionally three Parameters if dose, ka, and f were given as numbers.</p> <p>Examples:</p> <p>Absorbed dose to central compartment::</p> <pre><code>Model()\nMonomer(\"Drug\")\nCompartment('CENTRAL')\ndose_absorbed(Drug, CENTRAL, 100., 1.1, 0.8)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; dose_absorbed(Drug, CENTRAL, 100.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Rule('absorb_Drug_CENTRAL', None &gt;&gt; Drug() ** CENTRAL, expr_Drug_CENTRAL_absorb_rate),\n Parameter('dose_Drug_CENTRAL', 100.0),\n Expression('expr_Drug_CENTRAL_dose', dose_Drug_CENTRAL/V_CENTRAL),\n Parameter('ka_Drug_CENTRAL', 1.1),\n Parameter('F_Drug_CENTRAL', 0.8),\n Expression('expr_Drug_CENTRAL_absorb_rate', F_Drug_CENTRAL*ka_Drug_CENTRAL*(expr_Drug_CENTRAL_dose - _obs_ka_expr_Drug_CENTRAL)/V_CENTRAL),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def dose_absorbed(species, compartment, dose, ka, f):\n    \"\"\"\n    A dose that is absorbed into the compartment via first order kinetics with a given bioavailability.\n\n    Note that `species` is not required to be \"concrete\". The dose should be given in \n    amount such as weight, mass, or moles.\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species to set with Initial. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment to which the species is added.\n    dose : Parameter or number\n        The bolus dose amount. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    ka : Parameter or number\n        The first-order kinetic rate parameter for the absorption process. Units should be amount/time.\n    f : Parameter or number\n        The bioavailability of the drug/species (fraction 0 to 1).         \n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the unidirectional absorption Rule, an \n        expression for the effective rate (ka * f), and optionally three Parameters\n        if dose, ka, and f were given as numbers.\n\n    Examples\n    --------\n    Absorbed dose to central compartment::\n\n        Model()\n        Monomer(\"Drug\")\n        Compartment('CENTRAL')\n        dose_absorbed(Drug, CENTRAL, 100., 1.1, 0.8)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; dose_absorbed(Drug, CENTRAL, 100.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Rule('absorb_Drug_CENTRAL', None &gt;&gt; Drug() ** CENTRAL, expr_Drug_CENTRAL_absorb_rate),\n         Parameter('dose_Drug_CENTRAL', 100.0),\n         Expression('expr_Drug_CENTRAL_dose', dose_Drug_CENTRAL/V_CENTRAL),\n         Parameter('ka_Drug_CENTRAL', 1.1),\n         Parameter('F_Drug_CENTRAL', 0.8),\n         Expression('expr_Drug_CENTRAL_absorb_rate', F_Drug_CENTRAL*ka_Drug_CENTRAL*(expr_Drug_CENTRAL_dose - _obs_ka_expr_Drug_CENTRAL)/V_CENTRAL),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    def absorb_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, comp_name])\n\n    species = _check_for_monomer(species, compartment)\n    precursor_name = \"{}_{}_precursor\".format(monomer_name, comp_name)\n    precursor = Monomer(precursor_name)\n    monomers = ComponentSet([precursor])\n    params_created = ComponentSet()\n    Dose = dose\n    F = f\n    Vcomp = compartment.size\n    if not isinstance(Dose, Parameter):\n        Dose = Parameter(\"dose_{0}_{1}\".format(monomer_name, comp_name), dose)\n        dose_expr = Expression(\"expr_{0}_{1}_dose\".format(monomer_name, comp_name), Dose / Vcomp)\n        params_created.add(Dose)\n        params_created.add(dose_expr)\n    else:\n        dose_expr = Expression(\"expr_{0}_{1}_dose\".format(monomer_name, comp_name), Dose / Vcomp)\n        params_created.add(dose_expr)\n    if not isinstance(ka, Parameter):\n        ka = Parameter(\"ka_{0}_{1}\".format(monomer_name, comp_name), ka)\n        params_created.add(ka)\n    if not isinstance(f, Parameter):\n        F = Parameter(\"F_{0}_{1}\".format(monomer_name, comp_name), f)\n        params_created.add(F)\n    pre_0_expr = Expression('precursor_0', (dose_expr * F))\n    init_pre = Initial(precursor()**compartment, pre_0_expr)\n    #components.add(init_pre)           \n    #rate_expr = Expression(\"expr_{0}_{1}_absorb_rate\".format(monomer_name, comp_name), (dose_expr - obs_expr) * (F * ka_param) / Vcomp)\n    #params_created.add(rate_expr)\n\n    components = pysb.macros._macro_rule('absorb', precursor()**compartment &gt;&gt; species, [ka], ['ka'],\n                    name_func=absorb_name_func)\n\n    return components | params_created | monomers\n</code></pre>"},{"location":"reference/#pkpd.macros.dose_bolus","title":"<code>dose_bolus(species, compartment, dose)</code>","text":"<p>An instantaneous, or bolus, dose of species in compartment.</p> <p>Note that <code>species</code> is not required to be \"concrete\". The dose should be given in  amount such as weight, mass, or moles which is converted into a concentration by dividing by the compartment size. This is set as the initial concentration at  time zero. </p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species to set with Initial. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment to which the species is added.</p> required <code>dose</code> <code>Parameter or number</code> <p>The bolus dose amount. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the unidirectional elimination Rule and optionally a Parameter if kel was given as a number.</p> <p>Examples:</p> <p>Linear elimination all Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Central')\nMonomer('Drug')\ndose_bolus(Drug, Central, 100.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; dose_bolus(Drug, CENTRAL, 100.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Parameter('dose_Drug_CENTRAL', 100.0),\n Expression('expr_Drug_CENTRAL_0', dose_Drug_CENTRAL/V_CENTRAL),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def dose_bolus(species, compartment, dose):\n    \"\"\"\n    An instantaneous, or bolus, dose of species in compartment.\n\n    Note that `species` is not required to be \"concrete\". The dose should be given in \n    amount such as weight, mass, or moles which is converted into a concentration\n    by dividing by the compartment size. This is set as the initial concentration at \n    time zero. \n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species to set with Initial. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment to which the species is added.\n    dose : Parameter or number\n        The bolus dose amount. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the unidirectional elimination Rule\n        and optionally a Parameter if kel was given as a number.\n\n    Examples\n    --------\n    Linear elimination all Drug in the Central compartment::\n\n        Model()\n        Compartment('Central')\n        Monomer('Drug')\n        dose_bolus(Drug, Central, 100.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; dose_bolus(Drug, CENTRAL, 100.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Parameter('dose_Drug_CENTRAL', 100.0),\n         Expression('expr_Drug_CENTRAL_0', dose_Drug_CENTRAL/V_CENTRAL),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    Dose = dose\n    Vcomp = compartment.size\n    if not isinstance(Dose, Parameter):\n        Dose = Parameter(\"dose_{0}_{1}\".format(monomer_name, comp_name), dose)\n        dose_expr = Expression(\"expr_{0}_{1}_0\".format(monomer_name, comp_name), Dose / Vcomp)\n        params_created.add(Dose)\n        params_created.add(dose_expr)\n    else:\n        dose_expr = Expression(\"expr_{0}_{1}_0\".format(monomer_name, comp_name), Dose / Vcomp)\n        params_created.add(dose_expr) \n\n    initial = Initial(species, dose_expr)\n\n    return params_created #| ComponentSet([initial])\n</code></pre>"},{"location":"reference/#pkpd.macros.dose_infusion","title":"<code>dose_infusion(species, compartment, dose)</code>","text":"<p>A continuous, zero-order, infusion dose of species in compartment.</p> <p>Note that <code>species</code> is not required to be \"concrete\". Here, dose should be given in  amount per time such as weight/s, mass/s, or moles/s which is converted into a concentration per unit time by dividing by the compartment size. </p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species to set with Initial. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment to which the species is added.</p> required <code>dose</code> <code>Parameter or number</code> <p>The infusion dose rate. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the unidirectional elimination Rule and optionally a Parameter if kel was given as a number.</p> <p>Examples:</p> <p>Linear elimination all Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('CENTRAL')\nMonomer('Drug')\ndose_infusion(Drug, Central, 100.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; dose_infusion(Drug, CENTRAL, 100.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Rule('infuse_Drug_CENTRAL', None &gt;&gt; Drug() ** CENTRAL, expr_Drug_CENTRAL_k0),\n Parameter('dose_Drug_CENTRAL', 1.0),\n Expression('expr_Drug_CENTRAL_k0', dose_Drug_CENTRAL/V_CENTRAL),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def dose_infusion(species, compartment, dose):\n    \"\"\"\n    A continuous, zero-order, infusion dose of species in compartment.\n\n    Note that `species` is not required to be \"concrete\". Here, dose should be given in \n    amount per time such as weight/s, mass/s, or moles/s which is converted into a\n    concentration per unit time by dividing by the compartment size. \n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species to set with Initial. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment to which the species is added.\n    dose : Parameter or number\n        The infusion dose rate. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the unidirectional elimination Rule\n        and optionally a Parameter if kel was given as a number.\n\n    Examples\n    --------\n    Linear elimination all Drug in the Central compartment::\n\n        Model()\n        Compartment('CENTRAL')\n        Monomer('Drug')\n        dose_infusion(Drug, Central, 100.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; dose_infusion(Drug, CENTRAL, 100.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Rule('infuse_Drug_CENTRAL', None &gt;&gt; Drug() ** CENTRAL, expr_Drug_CENTRAL_k0),\n         Parameter('dose_Drug_CENTRAL', 1.0),\n         Expression('expr_Drug_CENTRAL_k0', dose_Drug_CENTRAL/V_CENTRAL),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    def infuse_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, comp_name])\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    Dose = dose\n    Vcomp = compartment.size\n    if not isinstance(Dose, Parameter):\n        Dose = Parameter(\"dose_{0}_{1}\".format(monomer_name, comp_name), dose)\n        dose_expr = Expression(\"expr_{0}_{1}_k0\".format(monomer_name, comp_name), Dose / Vcomp)\n        params_created.add(Dose)\n        params_created.add(dose_expr)\n    else:\n        dose_expr = Expression(\"expr_{0}_{1}_k0\".format(monomer_name, comp_name), Dose / Vcomp)\n        params_created.add(dose_expr) \n\n    #initial = Initial(species, 0)\n    components = pysb.macros._macro_rule('infuse', None &gt;&gt; species, [dose_expr], ['k0'],\n                    name_func=infuse_name_func)\n\n    return components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.drug_monomer","title":"<code>drug_monomer(name='Drug')</code>","text":"<p>Adds a new simple Monomer representing the drug to the model. </p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>string</code> <p>The name of the drug. Default=Drug.</p> <code>'Drug'</code> <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains drug Monomer.</p> <p>Examples:</p> <p>Add a drug name \"chaidil\"::</p> <pre><code>Model()\ndrug_monomer(name=\"chaidil\")\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; drug_monomer(name=\"chaidil\") # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Monomer('chaidil')\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def drug_monomer(name=\"Drug\"):\n    \"\"\"\n    Adds a new simple Monomer representing the drug to the model. \n\n    Parameters\n    ----------\n    name : string\n        The name of the drug. Default=Drug.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains drug Monomer.\n\n    Examples\n    --------\n    Add a drug name \"chaidil\"::\n\n        Model()\n        drug_monomer(name=\"chaidil\")\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; drug_monomer(name=\"chaidil\") # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Monomer('chaidil')\n        ])\n\n    \"\"\"   \n    monomer = Monomer(name)\n    components = ComponentSet([monomer])\n    return components\n</code></pre>"},{"location":"reference/#pkpd.macros.eliminate","title":"<code>eliminate(species, compartment, kel)</code>","text":"<p>Generate a reaction for linear elimination of a species from a compartment.</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species undergoing linear elimination. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment from which the species is being lost.</p> required <code>kel</code> <code>Parameters or number</code> <p>Linear elimination rate. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the unidirectional elimination Rule and optionally a Parameter if kel was given as a number.</p> <p>Examples:</p> <p>Linear elimination all Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Central')\nMonomer('Drug')\nelimination(Drug, Central, 1e-4)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; eliminate(Drug, CENTRAL, 1e-3) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\nRule('eliminate_Drug_CENTRAL', Drug() ** CENTRAL &gt;&gt; None, eliminate_Drug_CENTRAL_k),\nParameter('eliminate_Drug_CENTRAL_k', 0.001),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def eliminate(species, compartment, kel):\n    \"\"\"\n    Generate a reaction for linear elimination of a species from a compartment.\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species undergoing linear elimination. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment from which the species is being lost.\n    kel : Parameters or number\n        Linear elimination rate. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the unidirectional elimination Rule\n        and optionally a Parameter if kel was given as a number.\n\n    Examples\n    --------\n    Linear elimination all Drug in the Central compartment::\n\n        Model()\n        Compartment('Central')\n        Monomer('Drug')\n        elimination(Drug, Central, 1e-4)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; eliminate(Drug, CENTRAL, 1e-3) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n        Rule('eliminate_Drug_CENTRAL', Drug() ** CENTRAL &gt;&gt; None, eliminate_Drug_CENTRAL_k),\n        Parameter('eliminate_Drug_CENTRAL_k', 0.001),\n        ])\n\n    \"\"\"\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    def eliminate_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, comp_name])\n\n    species = _check_for_monomer(species, compartment)\n\n    return pysb.macros._macro_rule(\n        \"eliminate\", species &gt;&gt; None, [kel], [\"k\"], name_func=eliminate_name_func\n    )\n</code></pre>"},{"location":"reference/#pkpd.macros.eliminate_mm","title":"<code>eliminate_mm(species, compartment, vmax, km)</code>","text":"<p>Generate a reaction for Michaelis-Menten elimination of a species from a compartment.</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species undergoing linear elimination. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment from which the species is being lost.</p> required <code>vmax</code> <code>Parameter or number</code> <p>The maximum velocity (or limiting rate) for the reaction. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>km</code> <code>Parameter or number</code> <p>The Michaelis constant  for the reaction. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the unidirectional elimination Rule and optionally two Parameters if vmax and km were given as numbers.</p> <p>Examples:</p> <p>Non-linear elimination of Drug in the CENTRAL compartment::</p> <pre><code>Model()\nCompartment('CENTRAL')\nMonomer('Drug')\neliminate_mm(Drug, Central, 1., 15.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; eliminate_mm(Drug, CENTRAL, 1., 15.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Rule('eliminate_mm_Drug_CENTRAL', Drug() ** CENTRAL &gt;&gt; None, k_expr_Drug_CENTRAL),\n Parameter('Vmax_Drug_CENTRAL', 1.0),\n Parameter('Km_Drug_CENTRAL', 15.0),\n Observable('_obs_expr_Drug_CENTRAL', Drug() ** CENTRAL),\n Expression('k_expr_Drug_CENTRAL', Vmax_Drug_CENTRAL/(_obs_expr_Drug_CENTRAL + Km_Drug_CENTRAL)),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def eliminate_mm(species, compartment, vmax, km):\n    \"\"\"\n    Generate a reaction for Michaelis-Menten elimination of a species from a compartment.\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species undergoing linear elimination. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment from which the species is being lost.\n    vmax : Parameter or number\n        The maximum velocity (or limiting rate) for the reaction. If a Parameter\n        is passed, it will be used directly in the generated Rule. If a number\n        is passed, a Parameter will be created with an automatically generated\n        name based on the names and site states of the components of `species`\n        and this parameter will be included at\n        the end of the returned component list.\n    km : Parameter or number\n        The Michaelis constant  for the reaction. If a Parameter\n        is passed, it will be used directly in the generated Rule. If a number\n        is passed, a Parameter will be created with an automatically generated\n        name based on the names and site states of the components of `species`\n        and this parameter will be included at\n        the end of the returned component list.\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the unidirectional elimination Rule\n        and optionally two Parameters if vmax and km were given as numbers.\n\n    Examples\n    --------\n    Non-linear elimination of Drug in the CENTRAL compartment::\n\n        Model()\n        Compartment('CENTRAL')\n        Monomer('Drug')\n        eliminate_mm(Drug, Central, 1., 15.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; eliminate_mm(Drug, CENTRAL, 1., 15.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Rule('eliminate_mm_Drug_CENTRAL', Drug() ** CENTRAL &gt;&gt; None, k_expr_Drug_CENTRAL),\n         Parameter('Vmax_Drug_CENTRAL', 1.0),\n         Parameter('Km_Drug_CENTRAL', 15.0),\n         Observable('_obs_expr_Drug_CENTRAL', Drug() ** CENTRAL),\n         Expression('k_expr_Drug_CENTRAL', Vmax_Drug_CENTRAL/(_obs_expr_Drug_CENTRAL + Km_Drug_CENTRAL)),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    def eliminate_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, comp_name])\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    Vmax = vmax\n    if not isinstance(Vmax, Parameter):\n        Vmax = Parameter(\"Vmax_{0}_{1}\".format(monomer_name, comp_name), vmax)\n        params_created.add(Vmax)\n    Km = km\n    if not isinstance(Km, Parameter):\n        Km = Parameter(\"Km_{0}_{1}\".format(monomer_name, comp_name), km)\n        params_created.add(Km)\n    obs_expr = Observable(\"_obs_expr_{0}_{1}\".format(monomer_name, comp_name), species)\n    k_expr = Expression(\n        \"k_expr_{0}_{1}\".format(monomer_name, comp_name), Vmax / (obs_expr + Km)\n    )\n    expr_components = ComponentSet([obs_expr, k_expr])\n    components = pysb.macros._macro_rule(\n        \"eliminate_mm\", species &gt;&gt; None, [k_expr], [\"k\"], name_func=eliminate_name_func\n    )\n    components |= params_created\n    components |= expr_components\n\n    return components\n</code></pre>"},{"location":"reference/#pkpd.macros.emax","title":"<code>emax(species, compartment, emax, ec50)</code>","text":"<p>Generate an expression for Emax model for effect of species in a compartment:     emax * [species ** compartment] / ( [species ** compartment] + ec50 )</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species undergoing linear elimination. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment for which the effect is being measured.</p> required <code>emax</code> <code>Parameter or number</code> <p>Maximum effect value. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>ec50</code> <code>Parameter or number</code> <p>The 50% effect concentration. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the Emax expression, a corresponding  observable for the species concentration, and optionally up to two Parameters if emax and ec50 were given as numbers.</p> <p>Examples:</p> <p>Emax effect for Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Central')\nMonomer('Drug')\nemax(Drug, Central, 2.4, 100.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; emax(Drug, Central 2.4, 100.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Observable('_obs_emax_expr_Drug_CENTRAL', Drug() ** CENTRAL),\n Expression('Emax_expr_Drug_CENTRAL', _obs_emax_expr_Drug_CENTRAL*Emax_Drug_CENTRAL/(_obs_emax_expr_Drug_CENTRAL + EC50_Drug_CENTRAL)),\n Parameter('Emax_Drug_CENTRAL', 2.4),\n Parameter('EC50_Drug_CENTRAL', 100.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def emax(species, compartment, emax, ec50):\n    \"\"\"\n    Generate an expression for Emax model for effect of species in a compartment:\n        emax * [species ** compartment] / ( [species ** compartment] + ec50 )\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species undergoing linear elimination. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment for which the effect is being measured.\n    emax : Parameter or number\n        Maximum effect value. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    ec50 : Parameter or number\n        The 50% effect concentration. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the Emax expression, a corresponding \n        observable for the species concentration, and optionally up to two\n        Parameters if emax and ec50 were given as numbers.\n\n    Examples\n    --------\n    Emax effect for Drug in the Central compartment::\n\n        Model()\n        Compartment('Central')\n        Monomer('Drug')\n        emax(Drug, Central, 2.4, 100.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; emax(Drug, Central 2.4, 100.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Observable('_obs_emax_expr_Drug_CENTRAL', Drug() ** CENTRAL),\n         Expression('Emax_expr_Drug_CENTRAL', _obs_emax_expr_Drug_CENTRAL*Emax_Drug_CENTRAL/(_obs_emax_expr_Drug_CENTRAL + EC50_Drug_CENTRAL)),\n         Parameter('Emax_Drug_CENTRAL', 2.4),\n         Parameter('EC50_Drug_CENTRAL', 100.0),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    Emax = emax\n    if not isinstance(Emax, Parameter):\n        Emax = Parameter(\"Emax_{0}_{1}\".format(monomer_name, comp_name), emax)\n        params_created.add(Emax)\n    EC50 = ec50\n    if not isinstance(EC50, Parameter):\n        EC50 = Parameter(\"EC50_{0}_{1}\".format(monomer_name, comp_name), ec50)\n        params_created.add(EC50)\n    obs_expr = Observable(\n        \"_obs_emax_expr_{0}_{1}\".format(monomer_name, comp_name), species\n    )\n    expr = Expression(\n        \"Emax_expr_{0}_{1}\".format(monomer_name, comp_name),\n        (Emax * obs_expr) / (obs_expr + EC50),\n    )\n    expr_components = ComponentSet([obs_expr, expr])\n\n    return expr_components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.fixed_effect","title":"<code>fixed_effect(species, compartment, e_fixed, c_threshold)</code>","text":"<p>Generate an expression for Fixed-effect model with species in a compartment:     effect = E_fixed , [species ** compartment] &gt; c_threshold     effect = 0 , [species ** compartment] &lt; c_threshold</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species/drug whose effect is being measured. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment for which the effect is being measured.</p> required <code>e_fixed</code> <code>Parameter or number</code> <p>The fixed-effect value. If a  Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>c_threshold</code> <code>Parameter or number</code> <p>The threshold concentration for the fixed-effect. If a  Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the Linear expression, a corresponding  observable for the species concentration, and optionally a Parameter if slope was given as a number.</p> <p>Examples:</p> <p>Fixed-effect for Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Central')\nMonomer('Drug')\nfixed_effect(Drug, Central, 2.3, 10.0)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; fixed_effect(Drug, CENTRAL, 2.3, 10.0) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Observable('_obs_fixedeffect_expr_Drug_Central', Drug() ** Central),\n Expression('FixedEffect_expr_Drug_Central', Piecewise((Efixed_Drug_Central, _obs_fixedeffect_expr_Drug_Central &gt; Cthreshold_Drug_Central), (0, True))),\n Parameter('Efixed_Drug_Central', 2.3),\n Parameter('Cthreshold_Drug_Central', 10.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def fixed_effect(species, compartment, e_fixed, c_threshold):\n    \"\"\"\n    Generate an expression for Fixed-effect model with species in a compartment:\n        effect = E_fixed , [species ** compartment] &gt; c_threshold\n        effect = 0 , [species ** compartment] &lt; c_threshold\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species/drug whose effect is being measured. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment for which the effect is being measured.\n    e_fixed : Parameter or number\n        The fixed-effect value. If a \n        Parameter is passed, it will be used directly in the generated Rule.\n        If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    c_threshold : Parameter or number\n        The threshold concentration for the fixed-effect. If a \n        Parameter is passed, it will be used directly in the generated Rule.\n        If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the Linear expression, a corresponding \n        observable for the species concentration, and optionally a\n        Parameter if slope was given as a number.\n\n    Examples\n    --------\n    Fixed-effect for Drug in the Central compartment::\n\n        Model()\n        Compartment('Central')\n        Monomer('Drug')\n        fixed_effect(Drug, Central, 2.3, 10.0)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; fixed_effect(Drug, CENTRAL, 2.3, 10.0) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Observable('_obs_fixedeffect_expr_Drug_Central', Drug() ** Central),\n         Expression('FixedEffect_expr_Drug_Central', Piecewise((Efixed_Drug_Central, _obs_fixedeffect_expr_Drug_Central &gt; Cthreshold_Drug_Central), (0, True))),\n         Parameter('Efixed_Drug_Central', 2.3),\n         Parameter('Cthreshold_Drug_Central', 10.0),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    E_fixed = e_fixed\n    if not isinstance(e_fixed, Parameter):\n        E_fixed = Parameter(\"Efixed_{0}_{1}\".format(monomer_name, comp_name), e_fixed)\n        params_created.add(E_fixed)\n    C_threshold = c_threshold\n    if not isinstance(c_threshold, Parameter):\n        C_threshold = Parameter(\"Cthreshold_{0}_{1}\".format(monomer_name, comp_name), C_threshold)\n        params_created.add(C_threshold)    \n    obs_expr = Observable(\n        \"_obs_fixedeffect_expr_{0}_{1}\".format(monomer_name, comp_name), species\n    )\n    expr = Expression(\n        \"FixedEffect_expr_{0}_{1}\".format(monomer_name, comp_name),\n         Piecewise((E_fixed, obs_expr &gt; C_threshold), (0, True)),\n    )\n    expr_components = ComponentSet([obs_expr, expr])\n\n    return expr_components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.linear_effect","title":"<code>linear_effect(species, compartment, slope, intercept=0.0)</code>","text":"<p>Generate an expression for linear model for effect of species in a compartment:     effect = slope * [species ** compartment]  + intercept</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species/drug whose effect is being measured. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment for which the effect is being measured.</p> required <code>slope</code> <code>Parameter or number</code> <p>The proportinality factor or slope in the linear relationship. If a  Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>slope</code> <code>Parameter or number</code> <p>The y-intercept in the linear relationship. If a  Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the Linear expression, a corresponding  observable for the species concentration, and optionally a Parameter if slope was given as a number.</p> <p>Examples:</p> <p>Linear effect for Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Central')\nMonomer('Drug')\nlinear_effect(Drug, Central, 0.35, intercept=0.1)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; linear_effect(Drug, CENTRAL, 0.35, intercept=0.1) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Observable('_obs_lineffect_expr_Drug_Central', Drug() ** Central),\n Expression('LinearEffect_expr_Drug_Central', _obs_lineffect_expr_Drug_Central*LinEffect_Slope_Drug_Central + LinEffect_Intercept_Drug_Central),\n Parameter('LinEffect_Slope_Drug_Central', 0.35),\n Parameter('LinEffect_Intercept_Drug_Central', 0.1),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def linear_effect(species, compartment, slope, intercept=0.):\n    \"\"\"\n    Generate an expression for linear model for effect of species in a compartment:\n        effect = slope * [species ** compartment]  + intercept\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species/drug whose effect is being measured. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment for which the effect is being measured.\n    slope : Parameter or number\n        The proportinality factor or slope in the linear relationship. If a \n        Parameter is passed, it will be used directly in the generated Rule.\n        If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    slope : Parameter or number\n        The y-intercept in the linear relationship. If a \n        Parameter is passed, it will be used directly in the generated Rule.\n        If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.    \n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the Linear expression, a corresponding \n        observable for the species concentration, and optionally a\n        Parameter if slope was given as a number.\n\n    Examples\n    --------\n    Linear effect for Drug in the Central compartment::\n\n        Model()\n        Compartment('Central')\n        Monomer('Drug')\n        linear_effect(Drug, Central, 0.35, intercept=0.1)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; linear_effect(Drug, CENTRAL, 0.35, intercept=0.1) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Observable('_obs_lineffect_expr_Drug_Central', Drug() ** Central),\n         Expression('LinearEffect_expr_Drug_Central', _obs_lineffect_expr_Drug_Central*LinEffect_Slope_Drug_Central + LinEffect_Intercept_Drug_Central),\n         Parameter('LinEffect_Slope_Drug_Central', 0.35),\n         Parameter('LinEffect_Intercept_Drug_Central', 0.1),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    M = slope\n    if not isinstance(slope, Parameter):\n        M = Parameter(\"LinEffect_Slope_{0}_{1}\".format(monomer_name, comp_name), slope)\n        params_created.add(M)\n    B = intercept    \n    if not isinstance(intercept, Parameter):\n        B = Parameter(\"LinEffect_Intercept_{0}_{1}\".format(monomer_name, comp_name), intercept)\n        params_created.add(B)    \n    obs_expr = Observable(\n        \"_obs_lineffect_expr_{0}_{1}\".format(monomer_name, comp_name), species\n    )\n    expr = Expression(\n        \"LinearEffect_expr_{0}_{1}\".format(monomer_name, comp_name),\n        M * obs_expr + B,\n    )\n    expr_components = ComponentSet([obs_expr, expr])\n\n    return expr_components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.loglinear_effect","title":"<code>loglinear_effect(species, compartment, slope, intercept=0.0, base=None)</code>","text":"<p>Generate an expression for log-linear model for effect of species in a compartment:     effect = slope * log([species ** compartment])  + intercept</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species/drug whose effect is being measured. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment for which the effect is being measured.</p> required <code>slope</code> <code>Parameter or number</code> <p>The proportinality factor or slope in the linear relationship. If a  Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>slope</code> <code>Parameter or number - Defaults to 0</code> <p>The y-intercept in the linear relationship. If a  Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>base</code> <code>int, float, or None</code> <p>The base of the logarithm. Defaults to None. If None, the log function defaults to the natural logarithm.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the Linear expression, a corresponding  observable for the species concentration, and optionally a Parameter if slope was given as a number.</p> <p>Examples:</p> <p>Log-linear effect for Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Central')\nMonomer('Drug')\nloglinear_effect(Drug, Central, 0.35, intercept=0.1)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; loglinear_effect(Drug, CENTRAL, 0.35, intercept=0.1) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Observable('_obs_loglinearffect_expr_Drug_Central', Drug() ** Central),\n Expression('LogLinearEffect_expr_Drug_Central', LogLinEffect_Intercept_Drug_Central + LogLinEffect_Slope_Drug_Central*log(_obs_loglinearffect_expr_Drug_Central)),\n Parameter('LogLinEffect_Slope_Drug_Central', 0.35),\n Parameter('LogLinEffect_Intercept_Drug_Central', 0.1),\n ])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def loglinear_effect(species, compartment, slope, intercept=0., base=None):\n    \"\"\"\n    Generate an expression for log-linear model for effect of species in a compartment:\n        effect = slope * log([species ** compartment])  + intercept\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species/drug whose effect is being measured. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment for which the effect is being measured.\n    slope : Parameter or number\n        The proportinality factor or slope in the linear relationship. If a \n        Parameter is passed, it will be used directly in the generated Rule.\n        If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    slope : Parameter or number - Defaults to 0\n        The y-intercept in the linear relationship. If a \n        Parameter is passed, it will be used directly in the generated Rule.\n        If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    base : int, float, or None\n        The base of the logarithm. Defaults to None. If None, the log function\n        defaults to the natural logarithm.     \n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the Linear expression, a corresponding \n        observable for the species concentration, and optionally a\n        Parameter if slope was given as a number.\n\n    Examples\n    --------\n    Log-linear effect for Drug in the Central compartment::\n\n        Model()\n        Compartment('Central')\n        Monomer('Drug')\n        loglinear_effect(Drug, Central, 0.35, intercept=0.1)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; loglinear_effect(Drug, CENTRAL, 0.35, intercept=0.1) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Observable('_obs_loglinearffect_expr_Drug_Central', Drug() ** Central),\n         Expression('LogLinearEffect_expr_Drug_Central', LogLinEffect_Intercept_Drug_Central + LogLinEffect_Slope_Drug_Central*log(_obs_loglinearffect_expr_Drug_Central)),\n         Parameter('LogLinEffect_Slope_Drug_Central', 0.35),\n         Parameter('LogLinEffect_Intercept_Drug_Central', 0.1),\n         ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    M = slope\n    if not isinstance(slope, Parameter):\n        M = Parameter(\"LogLinEffect_Slope_{0}_{1}\".format(monomer_name, comp_name), slope)\n        params_created.add(M)\n    B = intercept    \n    if not isinstance(intercept, Parameter):\n        B = Parameter(\"LogLinEffect_Intercept_{0}_{1}\".format(monomer_name, comp_name), intercept)\n        params_created.add(B)    \n    obs_expr = Observable(\n        \"_obs_loglinearffect_expr_{0}_{1}\".format(monomer_name, comp_name), species\n    )\n    if base is None:\n        expr = Expression(\n            \"LogLinearEffect_expr_{0}_{1}\".format(monomer_name, comp_name),\n            M * sympy.log(obs_expr) + B,\n        )\n    else:\n        expr = Expression(\n            \"LogLinearEffect_expr_{0}_{1}\".format(monomer_name, comp_name),\n            M * sympy.log(obs_expr, base) + B,\n        )\n    expr_components = ComponentSet([obs_expr, expr])\n\n    return expr_components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.one_compartment","title":"<code>one_compartment(c1_name='CENTRAL', c1_size=1.0)</code>","text":"<p>Generate a compartment for a one-compartment model, or to add an additional compartment to a multi-compartment model. </p> <p>Parameters:</p> Name Type Description Default <code>c1_name</code> <code>string</code> <p>The name of the compartment. If a number is passed a Parameter will   be created and given as the size for Compartment. Default=CENTRAL.</p> <code>'CENTRAL'</code> <code>c1_size</code> <code>Parameter or number</code> <p>The volume of the compartment. If a number is passed a Parameter will   be created and given as the size for the Compartment. Default=1.0</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the compartment and optionally a Parameter if c1_size was  given as a number.</p> <p>Examples:</p> <p>Define a central compartment for a one-compartment model::</p> <pre><code>Model()\none_comapartment()\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; one_compartment() # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Compartment(name='CENTRAL', parent=None, dimension=3, size=V_CENTRAL),\n Parameter('V_CENTRAL', 1.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def one_compartment(c1_name=\"CENTRAL\", c1_size=1.0):\n    \"\"\"\n    Generate a compartment for a one-compartment model, or to add an additional compartment to a multi-compartment model. \n\n    Parameters\n    ----------\n    c1_name : string\n        The name of the compartment. If a number is passed a Parameter will \n         be created and given as the size for Compartment. Default=CENTRAL.\n    c1_size : Parameter or number\n        The volume of the compartment. If a number is passed a Parameter will \n         be created and given as the size for the Compartment. Default=1.0\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the compartment\n        and optionally a Parameter if c1_size was \n        given as a number.\n\n    Examples\n    --------\n    Define a central compartment for a one-compartment model::\n\n        Model()\n        one_comapartment()\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; one_compartment() # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Compartment(name='CENTRAL', parent=None, dimension=3, size=V_CENTRAL),\n         Parameter('V_CENTRAL', 1.0),\n        ])\n\n    \"\"\"\n    params_created = ComponentSet()\n    C1_size = c1_size\n    if not isinstance(C1_size, Parameter):\n        C1_size = Parameter(\"V_{0}\".format(c1_name), c1_size)\n        params_created.add(C1_size)\n    C1 = Compartment(c1_name, size=C1_size)\n    compartments = ComponentSet([C1])\n    return compartments | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.sigmoidal_emax","title":"<code>sigmoidal_emax(species, compartment, emax, ec50, n)</code>","text":"<p>Generate an expression for sigmoidal Emax model for effect of species in a compartment:     emax * [species ** compartment] ** n / ( [species ** compartment] ** n + ec50 ** n)</p> <p>Note that <code>species</code> is not required to be \"concrete\".</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>(Monomer, MonomerPattern or ComplexPattern)</code> <p>The species undergoing linear elimination. If a Monomer, sites are considered as unbound and in their default state. If a pattern, must be concrete.</p> required <code>compartment</code> <code>Compartment</code> <p>The compartment for which the effect is being measured.</p> required <code>emax</code> <code>Parameter or number</code> <p>Maximum effect value. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>ec50</code> <code>Parameter or number</code> <p>The 50% effect concentration. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <code>n</code> <code>Parameter or number</code> <p>The Hill coefficient. If a Parameter is passed, it will be used directly in the generated Rule. If a number is passed, a Parameter will be created with an automatically generated name based on the names and site states of the components of <code>species</code> and this parameter will be included at the end of the returned component list.</p> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the Emax expression, a corresponding  observable for the species concentration, and optionally up to three Parameters if emax, ec50, and n were given as numbers.</p> <p>Examples:</p> <p>Emax effect for Drug in the Central compartment::</p> <pre><code>Model()\nCompartment('Peripheral')\nMonomer('Drug')\nsigmoidal_emax(Drug, Peripheral, 4.4, 50.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment('CENTRAL', size=30.)\nCompartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n&gt;&gt;&gt; emax(Drug, Central 2.4, 100.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Observable('_obs_emax_expr_Drug_PERIPHERAL', Drug() ** PERIPHERAL),\n Expression('Emax_expr_Drug_PERIPHERAL', _obs_emax_expr_Drug_PERIPHERAL**n_Drug_PERIPHERAL*Emax_Drug_PERIPHERAL/(_obs_emax_expr_Drug_PERIPHERAL**n_Drug_PERIPHERAL + EC50_Drug_PERIPHERAL**n_Drug_PERIPHERAL)),\n Parameter('Emax_Drug_PERIPHERAL', 4.4),\n Parameter('EC50_Drug_PERIPHERAL', 50.0),\n Parameter('n_Drug_PERIPHERAL', 1.7),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def sigmoidal_emax(species, compartment, emax, ec50, n):\n    \"\"\"\n    Generate an expression for sigmoidal Emax model for effect of species in a compartment:\n        emax * [species ** compartment] ** n / ( [species ** compartment] ** n + ec50 ** n)\n\n    Note that `species` is not required to be \"concrete\".\n\n    Parameters\n    ----------\n    species : Monomer, MonomerPattern or ComplexPattern\n        The species undergoing linear elimination. If a Monomer, sites are considered\n        as unbound and in their default state. If a pattern, must be\n        concrete.\n    compartment : Compartment\n        The compartment for which the effect is being measured.\n    emax : Parameter or number\n        Maximum effect value. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    ec50 : Parameter or number\n        The 50% effect concentration. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.\n    n : Parameter or number\n        The Hill coefficient. If a Parameter is passed, it will be used directly in\n        the generated Rule. If a number is passed, a Parameter will be created\n        with an automatically generated name based on the names and site states\n        of the components of `species` and this parameter will be included at\n        the end of the returned component list.        \n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the Emax expression, a corresponding \n        observable for the species concentration, and optionally up to three\n        Parameters if emax, ec50, and n were given as numbers.\n\n    Examples\n    --------\n    Emax effect for Drug in the Central compartment::\n\n        Model()\n        Compartment('Peripheral')\n        Monomer('Drug')\n        sigmoidal_emax(Drug, Peripheral, 4.4, 50.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment('CENTRAL', size=30.)\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=30.)\n        &gt;&gt;&gt; emax(Drug, Central 2.4, 100.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Observable('_obs_emax_expr_Drug_PERIPHERAL', Drug() ** PERIPHERAL),\n         Expression('Emax_expr_Drug_PERIPHERAL', _obs_emax_expr_Drug_PERIPHERAL**n_Drug_PERIPHERAL*Emax_Drug_PERIPHERAL/(_obs_emax_expr_Drug_PERIPHERAL**n_Drug_PERIPHERAL + EC50_Drug_PERIPHERAL**n_Drug_PERIPHERAL)),\n         Parameter('Emax_Drug_PERIPHERAL', 4.4),\n         Parameter('EC50_Drug_PERIPHERAL', 50.0),\n         Parameter('n_Drug_PERIPHERAL', 1.7),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n    comp_name = compartment.name\n\n    species = _check_for_monomer(species, compartment)\n    params_created = ComponentSet()\n    Emax = emax\n    if not isinstance(Emax, Parameter):\n        Emax = Parameter(\"Emax_{0}_{1}\".format(monomer_name, comp_name), emax)\n        params_created.add(Emax)\n    EC50 = ec50\n    if not isinstance(EC50, Parameter):\n        EC50 = Parameter(\"EC50_{0}_{1}\".format(monomer_name, comp_name), ec50)\n        params_created.add(EC50)\n    hill_coeff = n\n    if not isinstance(n, Parameter):\n        hill_coeff = Parameter(\"n_{0}_{1}\".format(monomer_name, comp_name), n)\n        params_created.add(hill_coeff)\n    obs_expr = Observable(\n        \"_obs_emax_expr_{0}_{1}\".format(monomer_name, comp_name), species\n    )\n    expr = Expression(\n        \"Emax_expr_{0}_{1}\".format(monomer_name, comp_name),\n        (Emax * obs_expr**hill_coeff) / (obs_expr**hill_coeff + EC50**hill_coeff),\n    )\n    expr_components = ComponentSet([obs_expr, expr])\n\n    return expr_components | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.three_compartments","title":"<code>three_compartments(c1_name='CENTRAL', c1_size=1.0, c2_name='PERIPHERAL', c2_size=1.0, c3_name='DEEPPERIPHERAL', c3_size=1.0)</code>","text":"<p>Generate compartments for a three-compartment model. </p> <p>Parameters:</p> Name Type Description Default <code>c1_name</code> <code>string</code> <p>The name of compartment 1. Default=CENTRAL.</p> <code>'CENTRAL'</code> <code>c1_size</code> <code>Parameter or number</code> <p>The volume of compartment 1. If a number is passed a Parameter will   be created and given as the size for Compartment 1. Default=1.0</p> <code>1.0</code> <code>c2_name</code> <code>string</code> <p>The name of compartment 2. If a number is passed a Parameter will   be created and given as the size for Compartment 2. Default=PERIPHERAL.</p> <code>'PERIPHERAL'</code> <code>c2_size</code> <code>Parameter or number</code> <p>The volume of compartment 2. Default=1.0</p> <code>1.0</code> <code>c3_name</code> <code>string</code> <p>The name of compartment 2. If a number is passed a Parameter will   be created and given as the size for Compartment 3. Default=DEEPPERIPHERAL.</p> <code>'DEEPPERIPHERAL'</code> <code>c3_size</code> <code>Parameter or number</code> <p>The volume of compartment 3. Default=1.0</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the three compartments and optionally three Parameters if c1_size, c2_size and c3_size were given as numbers.</p> <p>Examples:</p> <p>Use the default compartments:</p> <pre><code>Model()\nthree_comapartments()\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; two_compartments() # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\nCompartment(name='CENTRAL', parent=None, dimension=3, size=V_CENTRAL),\nCompartment(name='PERIPHERAL', parent=None, dimension=3, size=V_PERIPHERAL),\nCompartment(name='DEEPPERIPHERAL', parent=None, dimension=3, size=V_DEEPPERIPHERAL),\nParameter('V_CENTRAL', 1.0),\nParameter('V_PERIPHERAL', 1.0),\nParameter('V_DEEPPERIPHERAL', 1.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def three_compartments(\n    c1_name=\"CENTRAL\",\n    c1_size=1.0,\n    c2_name=\"PERIPHERAL\",\n    c2_size=1.0,\n    c3_name=\"DEEPPERIPHERAL\",\n    c3_size=1.0,\n):\n    \"\"\"\n    Generate compartments for a three-compartment model. \n\n    Parameters\n    ----------\n    c1_name : string\n        The name of compartment 1. Default=CENTRAL.\n    c1_size : Parameter or number\n        The volume of compartment 1. If a number is passed a Parameter will \n         be created and given as the size for Compartment 1. Default=1.0\n    c2_name : string\n        The name of compartment 2. If a number is passed a Parameter will \n         be created and given as the size for Compartment 2. Default=PERIPHERAL.\n    c2_size : Parameter or number\n        The volume of compartment 2. Default=1.0\n    c3_name : string\n        The name of compartment 2. If a number is passed a Parameter will \n         be created and given as the size for Compartment 3. Default=DEEPPERIPHERAL.\n    c3_size : Parameter or number\n        The volume of compartment 3. Default=1.0\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the three compartments\n        and optionally three Parameters if c1_size, c2_size and\n        c3_size were given as numbers.\n\n    Examples\n    --------\n    Use the default compartments:\n\n        Model()\n        three_comapartments()\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; two_compartments() # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=V_CENTRAL),\n        Compartment(name='PERIPHERAL', parent=None, dimension=3, size=V_PERIPHERAL),\n        Compartment(name='DEEPPERIPHERAL', parent=None, dimension=3, size=V_DEEPPERIPHERAL),\n        Parameter('V_CENTRAL', 1.0),\n        Parameter('V_PERIPHERAL', 1.0),\n        Parameter('V_DEEPPERIPHERAL', 1.0),\n        ])\n    \"\"\"    \n    params_created = ComponentSet()\n    C1_size = c1_size\n    if not isinstance(C1_size, Parameter):\n        C1_size = Parameter(\"V_{0}\".format(c1_name), c1_size)\n        params_created.add(C1_size)\n    C2_size = c2_size\n    if not isinstance(C2_size, Parameter):\n        C2_size = Parameter(\"V_{0}\".format(c2_name), c2_size)\n        params_created.add(C2_size)\n    C3_size = c3_size\n    if not isinstance(C3_size, Parameter):\n        C3_size = Parameter(\"V_{0}\".format(c3_name), c3_size)\n        params_created.add(C3_size)\n    C1 = Compartment(c1_name, size=C1_size)\n    C2 = Compartment(c2_name, size=C2_size)\n    C3 = Compartment(c3_name, size=C3_size)\n    compartments = ComponentSet([C1, C2, C3])\n    return compartments | params_created\n</code></pre>"},{"location":"reference/#pkpd.macros.transfer","title":"<code>transfer(species, c1, c2, k)</code>","text":"<p>Generate a unimolecular irreversible reaction to transfer a species from one compartment to another:  species ** c1 --&gt; species ** c2.</p> <p>Parameters:</p> Name Type Description Default <code>species</code> <code>Monomer or MonomerPattern</code> required <code>c1</code> <code>Compartment</code> required <code>c2</code> <code>Compartment</code> required <code>k</code> <code> Parameter or number</code> required <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains one reversible Rule and optionally two Parameters if klist was given as plain numbers.</p> <p>Examples:</p> <p>Transfer drug irreveribly from the Central to Peripheral compartment::</p> <pre><code>Model()\nMonomer('Drug')\nCompartment(\"CENTRAL\")\nCompartment(\"PERIPHERAL\")\ntransfer(Drug, CENTRAL, PERIPHERAL,  1.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; Monomer('Drug')\nMonomer('Drug')\n&gt;&gt;&gt; Compartment(\"CENTRAL\")\nCompartment(name='CENTRAL', parent=None, dimension=3, size=1.),\n&gt;&gt;&gt; Compartment(\"PERIPERAL\")\nCompartment(name='PERIPHERAL', parent=None, dimension=3, size=1.),        \n&gt;&gt;&gt; transfer(Drug, CENTRAL, PERIPHERAL, 1.) # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\n Rule('transfer_Drug_CENTRAL_to_PERIPHERAL', Drug() ** CENTRAL &gt;&gt; Drug() ** PERIPHERAL, transfer_Drug_CENTRAL_to_PERIPHERAL_k),\n Parameter('transfer_Drug_CENTRAL_to_PERIPHERAL_k', 1.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def transfer(species, c1, c2, k):\n    \"\"\"\n    Generate a unimolecular irreversible reaction to transfer a species from one\n    compartment to another:  species ** c1 --&gt; species ** c2.\n\n    Parameters\n    ----------\n    species : Monomer or MonomerPattern\n    c1 : Compartment\n    c2 : Compartment\n    k :  Parameter or number\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains one reversible Rule and optionally\n        two Parameters if klist was given as plain numbers.\n\n    Examples\n    --------\n    Transfer drug irreveribly from the Central to Peripheral compartment::\n\n        Model()\n        Monomer('Drug')\n        Compartment(\"CENTRAL\")\n        Compartment(\"PERIPHERAL\")\n        transfer(Drug, CENTRAL, PERIPHERAL,  1.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; Monomer('Drug')\n        Monomer('Drug')\n        &gt;&gt;&gt; Compartment(\"CENTRAL\")\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=1.),\n        &gt;&gt;&gt; Compartment(\"PERIPERAL\")\n        Compartment(name='PERIPHERAL', parent=None, dimension=3, size=1.),        \n        &gt;&gt;&gt; transfer(Drug, CENTRAL, PERIPHERAL, 1.) # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n         Rule('transfer_Drug_CENTRAL_to_PERIPHERAL', Drug() ** CENTRAL &gt;&gt; Drug() ** PERIPHERAL, transfer_Drug_CENTRAL_to_PERIPHERAL_k),\n         Parameter('transfer_Drug_CENTRAL_to_PERIPHERAL_k', 1.0),\n        ])\n\n    \"\"\"\n\n    if isinstance(species, Monomer):\n        monomer_name = species.name\n    else:\n        monomer_name = species.monomer.name\n\n    # turn any Monomers into MonomerPatterns\n    def transfer_name_func(rule_expression):\n        cps = rule_expression.reactant_pattern.complex_patterns\n        # return '_'.join(pysb.macros._complex_pattern_label(cp) for cp in cps)\n        return \"_\".join([monomer_name, c1.name, \"to\", c2.name])\n\n    s1 = _check_for_monomer(species, c1)\n    s2 = _check_for_monomer(species, c2)\n    return pysb.macros._macro_rule(\n        \"transfer\", s1 &gt;&gt; s2, [k], [\"k\"], name_func=transfer_name_func\n    )\n</code></pre>"},{"location":"reference/#pkpd.macros.two_compartments","title":"<code>two_compartments(c1_name='CENTRAL', c1_size=1.0, c2_name='PERIPHERAL', c2_size=1.0)</code>","text":"<p>Generate compartments for a two-compartment model. </p> <p>Parameters:</p> Name Type Description Default <code>c1_name</code> <code>string</code> <p>The name of compartment 1. If a number is passed a Parameter will   be created and given as the size for Compartment 1. Default=CENTRAL.</p> <code>'CENTRAL'</code> <code>c1_size</code> <code>Parameter or number</code> <p>The volume of compartment 1. If a number is passed a Parameter will   be created and given as the size for Compartment 1. Default=1.0</p> <code>1.0</code> <code>c2_name</code> <code>string</code> <p>The name of compartment 2.  Default=PERIPHERAL.</p> <code>'PERIPHERAL'</code> <code>c2_size</code> <code>Parameter or number</code> <p>The volume of compartment 2. If a number is passed a Parameter will   be created and given as the size for Compartment 2. Default=1.0</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>components</code> <code>ComponentSet</code> <p>The generated components. Contains the two compartments and optionally two Parameters if c1_size and c2_size were  given as numbers.</p> <p>Examples:</p> <p>Use the default compartment names but adjust the size::</p> <pre><code>Model()\ntwo_comapartments(c1_size=30., c2_size=20.)\n\nExecution::\n\n&gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n&lt;Model '_interactive_' ...&gt;\n&gt;&gt;&gt; two_compartments() # doctest:+NORMALIZE_WHITESPACE\nComponentSet([\nCompartment(name='CENTRAL', parent=None, dimension=3, size=V_CENTRAL),\nCompartment(name='PERIPHERAL', parent=None, dimension=3, size=V_PERIPHERAL),\nParameter('V_CENTRAL', 1.0),\nParameter('V_PERIPHERAL', 1.0),\n])\n</code></pre> Source code in <code>src\\pysb\\pkpd\\macros.py</code> <pre><code>def two_compartments(c1_name=\"CENTRAL\", c1_size=1.0, c2_name=\"PERIPHERAL\", c2_size=1.0):\n    \"\"\"\n    Generate compartments for a two-compartment model. \n\n    Parameters\n    ----------\n    c1_name : string\n        The name of compartment 1. If a number is passed a Parameter will \n         be created and given as the size for Compartment 1. Default=CENTRAL.\n    c1_size : Parameter or number\n        The volume of compartment 1. If a number is passed a Parameter will \n         be created and given as the size for Compartment 1. Default=1.0\n    c2_name : string\n        The name of compartment 2.  Default=PERIPHERAL.\n    c2_size : Parameter or number\n        The volume of compartment 2. If a number is passed a Parameter will \n         be created and given as the size for Compartment 2. Default=1.0\n\n    Returns\n    -------\n    components : ComponentSet\n        The generated components. Contains the two compartments\n        and optionally two Parameters if c1_size and c2_size were \n        given as numbers.\n\n    Examples\n    --------\n    Use the default compartment names but adjust the size::\n\n        Model()\n        two_comapartments(c1_size=30., c2_size=20.)\n\n        Execution::\n\n        &gt;&gt;&gt; Model() # doctest:+ELLIPSIS\n        &lt;Model '_interactive_' ...&gt;\n        &gt;&gt;&gt; two_compartments() # doctest:+NORMALIZE_WHITESPACE\n        ComponentSet([\n        Compartment(name='CENTRAL', parent=None, dimension=3, size=V_CENTRAL),\n        Compartment(name='PERIPHERAL', parent=None, dimension=3, size=V_PERIPHERAL),\n        Parameter('V_CENTRAL', 1.0),\n        Parameter('V_PERIPHERAL', 1.0),\n        ])\n\n    \"\"\"\n    params_created = ComponentSet()\n    C1_size = c1_size\n    if not isinstance(C1_size, Parameter):\n        C1_size = Parameter(\"V_{0}\".format(c1_name), c1_size)\n        params_created.add(C1_size)\n    C2_size = c2_size\n    if not isinstance(C2_size, Parameter):\n        C2_size = Parameter(\"V_{0}\".format(c2_name), c2_size)\n        params_created.add(C2_size)\n    C1 = Compartment(c1_name, size=C1_size)\n    C2 = Compartment(c2_name, size=C2_size)\n    compartments = ComponentSet([C1, C2])\n    return compartments | params_created\n</code></pre>"},{"location":"reference/#pkpd.standard","title":"<code>pkpd.standard</code>","text":""},{"location":"reference/#pkpd.standard.one_compartment_model","title":"<code>one_compartment_model(dose_amount, dose_route='iv-bolus', dose_parameters=None, volume_distribution=1.0, clearance=0.5, pd_model=None)</code>","text":"<p>Generates a standard one-compartment PK/PD model.</p> <p>Parameters:</p> Name Type Description Default <code>dose_amount</code> <code>float</code> <p>The amount of drug in the dose.</p> required <code>dose_route</code> <code>str</code> <p>The route of drug adminstration. Default=\"iv-bolus\". Options: 'iv-bolus', 'iv-infusion', 'oral'.</p> <code>'iv-bolus'</code> <code>dose_parameters</code> <code>dict | None</code> <p>Additional special dose/route parameters. Only required for the 'oral' route with parameters: 'ka' - 1st-order absorption rate constant. 'f' - bioavailibity fraction.</p> <code>None</code> <code>volume_distribution</code> <code>float</code> <p>Volume of distribution; i.e., the volume of the central compartment. Default=1..</p> <code>1.0</code> <code>clearance</code> <code>float</code> <p>Clearance rate of the drug (volume/time). Default=0.5.</p> <code>0.5</code> <code>pd_model</code> <code>dict | None</code> <p>Set the PD model and its paramters. Default=None. Options:     'emax' - parameters: 'emax', 'ec50'     'sigmoidal-emax' - parameters: 'emax', 'ec50', 'n'     'linear' - parameters: 'slope', 'intercept'     'log-linear' - parameters: 'slope', 'intercept'     'fixed' - parameters: 'e_fixed', 'c_threshold'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>model</code> <code>Model</code> <p>The generated model.</p> <p>Examples:</p> <p>Oral administration with Emax PD::</p> <pre><code>model = one_compartment_model(\n    100.0,  # mg\n    dose_route=\"oral\",\n    dose_parameters={\n        'ka': 1e-1, # min^-1\n         'f': 0.95,\n    },\n    volume_distribution=10.0,  # L\n    clearance=0.750,  # L/min\n    pd_model={\n        \"emax\": {\n            \"emax\": 2.2,\n            \"ec50\": 50.0,  # mg\n        }\n    },\n)\n</code></pre> <p>I.V. infusion administration with linear PD::</p> <pre><code>model = one_compartment_model(\n    100.0,  # mg\n    dose_route=\"iv-infusion\",\n    volume_distribution=10.0,  # L\n    clearance=0.750,  # L/min\n    pd_model={\n        \"linear\": {\n            \"slope\": 0.2, # mg^-1\n            \"intercept\": 1.2,\n        }\n    },\n)\n</code></pre> Source code in <code>src\\pysb\\pkpd\\standard.py</code> <pre><code>def one_compartment_model(\n    dose_amount: float,\n    dose_route: str = \"iv-bolus\",\n    dose_parameters: dict | None = None,\n    volume_distribution: float = 1.0,\n    clearance: float = 0.5,\n    pd_model: dict | None = None,\n):\n    \"\"\"Generates a standard one-compartment PK/PD model.\n\n    Parameters\n    ----------\n    dose_amount : float\n        The amount of drug in the dose.\n    dose_route : str, optional\n        The route of drug adminstration. Default=\"iv-bolus\".\n        Options: 'iv-bolus', 'iv-infusion', 'oral'.\n    dose_parameters : dict | None, optional\n        Additional special dose/route parameters. Only\n        required for the 'oral' route with parameters:\n        'ka' - 1st-order absorption rate constant.\n        'f' - bioavailibity fraction.\n    volume_distribution : float, optional\n        Volume of distribution; i.e., the volume of the central compartment.\n        Default=1..\n    clearance : float, optional\n        Clearance rate of the drug (volume/time). Default=0.5.\n    pd_model : dict | None, optional\n        Set the PD model and its paramters. Default=None.\n        Options:\n            'emax' - parameters: 'emax', 'ec50'\n            'sigmoidal-emax' - parameters: 'emax', 'ec50', 'n'\n            'linear' - parameters: 'slope', 'intercept'\n            'log-linear' - parameters: 'slope', 'intercept'\n            'fixed' - parameters: 'e_fixed', 'c_threshold'\n\n    Returns\n    -------\n    model: pysb.Model\n        The generated model.\n\n    Examples\n    --------\n    Oral administration with Emax PD::\n\n        model = one_compartment_model(\n            100.0,  # mg\n            dose_route=\"oral\",\n            dose_parameters={\n                'ka': 1e-1, # min^-1\n                 'f': 0.95,\n            },\n            volume_distribution=10.0,  # L\n            clearance=0.750,  # L/min\n            pd_model={\n                \"emax\": {\n                    \"emax\": 2.2,\n                    \"ec50\": 50.0,  # mg\n                }\n            },\n        )\n\n    I.V. infusion administration with linear PD::\n\n        model = one_compartment_model(\n            100.0,  # mg\n            dose_route=\"iv-infusion\",\n            volume_distribution=10.0,  # L\n            clearance=0.750,  # L/min\n            pd_model={\n                \"linear\": {\n                    \"slope\": 0.2, # mg^-1\n                    \"intercept\": 1.2,\n                }\n            },\n        )\n    \"\"\"\n    model = Model(\"one-compartment-model\")\n    macros.drug_monomer()\n    Parameter(\"Vd\", volume_distribution)\n    macros.one_compartment(c1_size=Vd)\n    Parameter(\"dose\", dose_amount)\n    if dose_parameters is None:\n        dose_parameters = {}\n    DOSING_OPTIONS[dose_route](Drug, CENTRAL, dose, **dose_parameters)\n    if clearance &gt; 0:\n        Parameter(\"CL\", clearance)\n        macros.clearance(Drug, CENTRAL, CL)\n    if pd_model is not None:\n        for key, value in pd_model.items():\n            PD_MODELS[key](Drug, CENTRAL, **value)\n    return model\n</code></pre>"},{"location":"reference/#pkpd.standard.three_compartment_model","title":"<code>three_compartment_model(dose_amount, dose_route='iv-bolus', dose_parameters=None, volume_central=1.0, volume_peripheral=1.0, volume_deep_peripheral=1.0, k12=0.1, k21=0.01, k13=0.001, k31=0.0001, clearance=0.5, pd_model=None)</code>","text":"<p>Generates a standard three-compartment PK/PD model.</p> <p>Parameters:</p> Name Type Description Default <code>dose_amount</code> <code>float</code> <p>The amount of drug in the dose.</p> required <code>dose_route</code> <code>str</code> <p>The route of drug adminstration. Default=\"iv-bolus\". Options: 'iv-bolus', 'iv-infusion', 'oral'.</p> <code>'iv-bolus'</code> <code>dose_parameters</code> <code>dict | None</code> <p>Additional special dose/route parameters. Only required for the 'oral' route with parameters:     'ka' - 1st-order absorption rate constant.     'f' - bioavailibity fraction.</p> <code>None</code> <code>volume_central</code> <code>float</code> <p>Volume of the central compartment. Default=1..</p> <code>1.0</code> <code>volume_peripheral</code> <code>float</code> <p>Volume of the peripheral compartment. Default=1..</p> <code>1.0</code> <code>k12</code> <code>float</code> <p>The rate constant for distribution from the cental to peripheral compartment. Default=0.1.</p> <code>0.1</code> <code>k21</code> <code>float</code> <p>The rate constant for redistribution from the peripheral to central compartment. Default=0.01.</p> <code>0.01</code> <code>k13</code> <code>float</code> <p>The rate constant for distribution from the cental to deep peripheral compartment. Default=0.001.</p> <code>0.001</code> <code>k31</code> <code>float</code> <p>The rate constant for redistribution from the deep peripheral to central compartment. Default=0.0001.</p> <code>0.0001</code> <code>clearance</code> <code>float</code> <p>Clearance rate of the drug (volume/time). Default=0.5.</p> <code>0.5</code> <code>pd_model</code> <code>dict | None</code> <p>Set the PD model and its paramters. Default=None. Options:     'emax' - parameters: 'emax', 'ec50'     'sigmoidal-emax' - parameters: 'emax', 'ec50', 'n'     'linear' - parameters: 'slope', 'intercept'     'log-linear' - parameters: 'slope', 'intercept'     'fixed' - parameters: 'e_fixed', 'c_threshold'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>model</code> <code>Model</code> <p>The generated model.</p> <p>Examples:</p> <p>Oral administration with Emax PD::</p> <pre><code>model = three_compartment_model(\n    100.0,  # mg\n    dose_route=\"oral\",\n    dose_parameters={\n        'ka': 1e-1, # min^-1\n         'f': 0.95,\n    },\n    volume_central=10.0,  # L\n    volume_peripheral=2.0, # L\n    k12=1e-2, # min^-1\n    k21=1e-4, # min^-1\n    k13=1e-3, # min^-1\n    k31=1e-5, # min^-1\n    clearance=0.750,  # L/min\n    pd_model={\n        \"emax\": {\n            \"emax\": 2.2,\n            \"ec50\": 50.0,  # mg\n        }\n    },\n)\n</code></pre> <p>I.V. infusion administration with linear PD::</p> <pre><code>model = three_compartment_model(\n    100.0,  # mg\n    dose_route=\"iv-infusion\",\n    volume_central=10.0,  # L\n    volume_peripheral=2.0, # L\n    k12=1e-2, # min^-1\n    k21=1e-4, # min^-1\n    k13=1e-3, # min^-1\n    k31=1e-5, # min^-1\n    clearance=0.750,  # L/min\n    pd_model={\n        \"linear\": {\n            \"slope\": 0.2, # mg^-1\n            \"intercept\": 1.2,\n        }\n    },\n)\n</code></pre> Source code in <code>src\\pysb\\pkpd\\standard.py</code> <pre><code>def three_compartment_model(\n    dose_amount: float,\n    dose_route: str = \"iv-bolus\",\n    dose_parameters: dict | None = None,\n    volume_central: float = 1.0,\n    volume_peripheral: float = 1.0,\n    volume_deep_peripheral: float = 1.0,\n    k12: float = 1e-1,\n    k21: float = 1e-2,\n    k13: float = 1e-3,\n    k31: float = 1e-4,\n    clearance: float = 0.5,\n    pd_model: dict | None = None,\n):\n    \"\"\"Generates a standard three-compartment PK/PD model.\n\n    Parameters\n    ----------\n    dose_amount : float\n        The amount of drug in the dose.\n    dose_route : str, optional\n        The route of drug adminstration. Default=\"iv-bolus\".\n        Options: 'iv-bolus', 'iv-infusion', 'oral'.\n    dose_parameters : dict | None, optional\n        Additional special dose/route parameters. Only\n        required for the 'oral' route with parameters:\n            'ka' - 1st-order absorption rate constant.\n            'f' - bioavailibity fraction.\n    volume_central : float, optional\n        Volume of the central compartment. Default=1..\n    volume_peripheral : float, optional\n        Volume of the peripheral compartment. Default=1..\n    k12 : float, optional\n        The rate constant for distribution from the cental to peripheral\n        compartment. Default=0.1.\n    k21 : float, optional\n        The rate constant for redistribution from the peripheral to central\n        compartment. Default=0.01.\n    k13 : float, optional\n        The rate constant for distribution from the cental to deep peripheral\n        compartment. Default=0.001.\n    k31 : float, optional\n        The rate constant for redistribution from the deep peripheral to central\n        compartment. Default=0.0001.\n    clearance : float, optional\n        Clearance rate of the drug (volume/time). Default=0.5.\n    pd_model : dict | None, optional\n        Set the PD model and its paramters. Default=None.\n        Options:\n            'emax' - parameters: 'emax', 'ec50'\n            'sigmoidal-emax' - parameters: 'emax', 'ec50', 'n'\n            'linear' - parameters: 'slope', 'intercept'\n            'log-linear' - parameters: 'slope', 'intercept'\n            'fixed' - parameters: 'e_fixed', 'c_threshold'\n\n    Returns\n    -------\n    model : pysb.Model\n        The generated model.\n\n    Examples\n    --------\n    Oral administration with Emax PD::\n\n        model = three_compartment_model(\n            100.0,  # mg\n            dose_route=\"oral\",\n            dose_parameters={\n                'ka': 1e-1, # min^-1\n                 'f': 0.95,\n            },\n            volume_central=10.0,  # L\n            volume_peripheral=2.0, # L\n            k12=1e-2, # min^-1\n            k21=1e-4, # min^-1\n            k13=1e-3, # min^-1\n            k31=1e-5, # min^-1\n            clearance=0.750,  # L/min\n            pd_model={\n                \"emax\": {\n                    \"emax\": 2.2,\n                    \"ec50\": 50.0,  # mg\n                }\n            },\n        )\n\n    I.V. infusion administration with linear PD::\n\n        model = three_compartment_model(\n            100.0,  # mg\n            dose_route=\"iv-infusion\",\n            volume_central=10.0,  # L\n            volume_peripheral=2.0, # L\n            k12=1e-2, # min^-1\n            k21=1e-4, # min^-1\n            k13=1e-3, # min^-1\n            k31=1e-5, # min^-1\n            clearance=0.750,  # L/min\n            pd_model={\n                \"linear\": {\n                    \"slope\": 0.2, # mg^-1\n                    \"intercept\": 1.2,\n                }\n            },\n        )\n    \"\"\"\n    model = Model(\"three-compartment-model\")\n    macros.drug_monomer()\n    Parameter(\"Vc\", volume_central)\n    Parameter(\"Vp\", volume_peripheral)\n    Parameter(\"Vdp\", volume_deep_peripheral)\n    macros.three_compartments(c1_size=Vc, c2_size=Vp, c3_size=Vdp)\n    Parameter(\"dose\", dose_amount)\n    if dose_parameters is None:\n        dose_parameters = {}\n    DOSING_OPTIONS[dose_route](Drug, CENTRAL, dose, **dose_parameters)\n    if clearance &gt; 0:\n        Parameter(\"CL\", clearance)\n        macros.clearance(Drug, CENTRAL, CL)\n    if pd_model is not None:\n        for key, value in pd_model.items():\n            PD_MODELS[key](Drug, CENTRAL, **value)\n    macros.distribute(Drug, CENTRAL, PERIPHERAL, klist=[k12, k21])\n    macros.distribute(Drug, CENTRAL, DEEPPERIPHERAL, klist=[k13, k31])\n    return model\n</code></pre>"},{"location":"reference/#pkpd.standard.two_compartment_model","title":"<code>two_compartment_model(dose_amount, dose_route='iv-bolus', dose_parameters=None, volume_central=1.0, volume_peripheral=1.0, k12=0.1, k21=0.01, clearance=0.5, pd_model=None)</code>","text":"<p>Generates a standard two-compartment PK/PD model.</p> <p>Parameters:</p> Name Type Description Default <code>dose_amount</code> <code>float</code> <p>The amount of drug in the dose.</p> required <code>dose_route</code> <code>str</code> <p>The route of drug adminstration. Default=\"iv-bolus\". Options: 'iv-bolus', 'iv-infusion', 'oral'.</p> <code>'iv-bolus'</code> <code>dose_parameters</code> <code>dict | None</code> <p>Additional special dose/route parameters. Only required for the 'oral' route with parameters:     'ka' - 1st-order absorption rate constant.     'f' - bioavailibity fraction.</p> <code>None</code> <code>volume_central</code> <code>float</code> <p>Volume of the central compartment. Default=1..</p> <code>1.0</code> <code>volume_peripheral</code> <code>float</code> <p>Volume of the peripheral compartment. Default=1..</p> <code>1.0</code> <code>k12</code> <code>float, optional)</code> <p>The rate constant for distribution from the cental to peripheral compartment. Default=0.1.</p> <code>0.1</code> <code>k21</code> <code>float</code> <p>The rate constant for redistribution from the peripheral to central compartment. Default=0.01.</p> <code>0.01</code> <code>clearance</code> <code>float</code> <p>Clearance rate of the drug (volume/time). Default=0.5.</p> <code>0.5</code> <code>pd_model</code> <code>dict | None</code> <p>Set the PD model and its paramters. Default=None. Options:     'emax' - parameters: 'emax', 'ec50'     'sigmoidal-emax' - parameters: 'emax', 'ec50', 'n'     'linear' - parameters: 'slope', 'intercept'     'log-linear' - parameters: 'slope', 'intercept'     'fixed' - parameters: 'e_fixed', 'c_threshold'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>model</code> <code>Model</code> <p>The generated model.</p> <p>Examples:</p> <p>Oral administration with Emax PD::</p> <pre><code>model = two_compartment_model(\n    100.0,  # mg\n    dose_route=\"oral\",\n    dose_parameters={\n        'ka': 1e-1, # min^-1\n         'f': 0.95,\n    },\n    volume_central=10.0,  # L\n    volume_peripheral=2.0, # L\n    k12=1e-2, # min^-1\n    k21=1e-4, # min^-1\n    clearance=0.750,  # L/min\n    pd_model={\n        \"emax\": {\n            \"emax\": 2.2,\n            \"ec50\": 50.0,  # mg\n        }\n    },\n)\n</code></pre> <p>I.V. infusion administration with linear PD::</p> <pre><code>model = two_compartment_model(\n    100.0,  # mg\n    dose_route=\"iv-infusion\",\n    volume_central=10.0,  # L\n    volume_peripheral=2.0, # L\n    k12=1e-2, # min^-1\n    k21=1e-4, # min^-1\n    clearance=0.750,  # L/min\n    pd_model={\n        \"linear\": {\n            \"slope\": 0.2, # mg^-1\n            \"intercept\": 1.2,\n        }\n    },\n)\n</code></pre> Source code in <code>src\\pysb\\pkpd\\standard.py</code> <pre><code>def two_compartment_model(\n    dose_amount: float,\n    dose_route: str = \"iv-bolus\",\n    dose_parameters: dict | None = None,\n    volume_central: float = 1.0,\n    volume_peripheral: float = 1.0,\n    k12: float = 1e-1,\n    k21: float = 1e-2,\n    clearance: float = 0.5,\n    pd_model: dict | None = None,\n):\n    \"\"\"Generates a standard two-compartment PK/PD model.\n\n    Parameters\n    ----------\n    dose_amount : float\n        The amount of drug in the dose.\n    dose_route : str, optional\n        The route of drug adminstration. Default=\"iv-bolus\".\n        Options: 'iv-bolus', 'iv-infusion', 'oral'.\n    dose_parameters : dict | None, optional\n        Additional special dose/route parameters. Only\n        required for the 'oral' route with parameters:\n            'ka' - 1st-order absorption rate constant.\n            'f' - bioavailibity fraction.\n    volume_central : float, optional\n        Volume of the central compartment. Default=1..\n    volume_peripheral : float, optional\n        Volume of the peripheral compartment. Default=1..\n    k12 : float, optional)\n        The rate constant for distribution from the cental to peripheral\n        compartment. Default=0.1.\n    k21 : float, optional\n        The rate constant for redistribution from the peripheral to central\n        compartment. Default=0.01.\n    clearance : float, optional\n        Clearance rate of the drug (volume/time). Default=0.5.\n    pd_model : dict | None, optional\n        Set the PD model and its paramters. Default=None.\n        Options:\n            'emax' - parameters: 'emax', 'ec50'\n            'sigmoidal-emax' - parameters: 'emax', 'ec50', 'n'\n            'linear' - parameters: 'slope', 'intercept'\n            'log-linear' - parameters: 'slope', 'intercept'\n            'fixed' - parameters: 'e_fixed', 'c_threshold'\n\n    Returns\n    -------\n    model : pysb.Model\n        The generated model.\n\n    Examples\n    --------\n    Oral administration with Emax PD::\n\n        model = two_compartment_model(\n            100.0,  # mg\n            dose_route=\"oral\",\n            dose_parameters={\n                'ka': 1e-1, # min^-1\n                 'f': 0.95,\n            },\n            volume_central=10.0,  # L\n            volume_peripheral=2.0, # L\n            k12=1e-2, # min^-1\n            k21=1e-4, # min^-1\n            clearance=0.750,  # L/min\n            pd_model={\n                \"emax\": {\n                    \"emax\": 2.2,\n                    \"ec50\": 50.0,  # mg\n                }\n            },\n        )\n\n    I.V. infusion administration with linear PD::\n\n        model = two_compartment_model(\n            100.0,  # mg\n            dose_route=\"iv-infusion\",\n            volume_central=10.0,  # L\n            volume_peripheral=2.0, # L\n            k12=1e-2, # min^-1\n            k21=1e-4, # min^-1\n            clearance=0.750,  # L/min\n            pd_model={\n                \"linear\": {\n                    \"slope\": 0.2, # mg^-1\n                    \"intercept\": 1.2,\n                }\n            },\n        )\n    \"\"\"\n    model = Model(\"two-compartment-model\")\n    macros.drug_monomer()\n    Parameter(\"Vc\", volume_central)\n    Parameter(\"Vp\", volume_peripheral)\n    macros.two_compartments(c1_size=Vc, c2_size=Vp)\n    Parameter(\"dose\", dose_amount)\n    if dose_parameters is None:\n        dose_parameters = {}\n    DOSING_OPTIONS[dose_route](Drug, CENTRAL, dose, **dose_parameters)\n    if clearance &gt; 0:\n        Parameter(\"CL\", clearance)\n        macros.clearance(Drug, CENTRAL, CL)\n    if pd_model is not None:\n        for key, value in pd_model.items():\n            PD_MODELS[key](Drug, CENTRAL, **value)\n    macros.distribute(Drug, CENTRAL, PERIPHERAL, klist=[k12, k21])\n    return model\n</code></pre>"},{"location":"reference/#pkpd.util","title":"<code>pkpd.util</code>","text":""},{"location":"reference/#pkpd.util.simulate","title":"<code>simulate(model, tspan, param_values=None, initials=None, nprocs=1)</code>","text":"<p>Simulate the given model using the ScipyOdeSimulator.</p> <p>This function abstracts setting up and running a simulation of the model using the ScipyOdeSimulator with the lsoda integrator. It returns the corresponding model trajectory.</p> <p>Args:     model: The input PySB model to simulate.     tspan: The time span to simulate the model over.     param_values: Optional specification of parameters to use when         simulating the model. If None, the nominal/default model parameters         will be used. The input can be None, a single parameter vector, or         a list of parameter vectors that will each be simulated.     initials: Optional specification of initial concentrations to use when         simulating the model. If None, the nominal/default model values         will be used. The input can be None, a single vector, or         a list of vectors that will each be simulated.</p> <p>Returns:     The PySB model simulation trajectory as a structured NumPy array.</p> Source code in <code>src\\pysb\\pkpd\\util.py</code> <pre><code>def simulate(\n    model: pysb.Model,\n    tspan: np.ndarray,\n    param_values: None | np.ndarray | list[np.ndarray] = None,\n    initials: None | np.ndarray | list[np.ndarray] = None,\n    nprocs: int = 1,\n) -&gt; np.ndarray:\n    \"\"\"Simulate the given model using the ScipyOdeSimulator.\n\n    This function abstracts setting up and running a simulation of the model using\n    the ScipyOdeSimulator with the lsoda integrator. It returns the corresponding model\n    trajectory.\n\n    Args:\n        model: The input PySB model to simulate.\n        tspan: The time span to simulate the model over.\n        param_values: Optional specification of parameters to use when\n            simulating the model. If None, the nominal/default model parameters\n            will be used. The input can be None, a single parameter vector, or\n            a list of parameter vectors that will each be simulated.\n        initials: Optional specification of initial concentrations to use when\n            simulating the model. If None, the nominal/default model values\n            will be used. The input can be None, a single vector, or\n            a list of vectors that will each be simulated.\n\n    Returns:\n        The PySB model simulation trajectory as a structured NumPy array.\n    \"\"\"\n\n    simulator = ScipyOdeSimulator(\n        model,\n        tspan=tspan,\n        integrator=\"lsoda\",\n    )\n    simulation_result = simulator.run(\n        param_values=param_values, initials=initials, num_processors=nprocs\n    )\n    simulation_trajectory = simulation_result.all\n    return simulation_trajectory\n</code></pre>"},{"location":"related-software/","title":"Related Software","text":"<p>There are a variety of pharmacological modeling tools. Below is a (likely non-exhaustive) list of such tools categorized into free/open-source and commercial/proprietary tools, and grouped by programming language where applicable.</p>"},{"location":"related-software/#free-open-source-tools","title":"Free &amp; Open-Source Tools","text":""},{"location":"related-software/#python-based-solutions","title":"Python-Based Solutions","text":"<ul> <li>PharmPy \u2013 A Python-based toolkit for nonlinear mixed-effects modeling, focused on PK/PD applications. (GPL-3.0)</li> <li>scipion-pkpd \u2013 A Python plugin for PK/PD modeling within the Scipion workflow engine. (GPL-3.0)</li> <li>Chi \u2013 A Python-based pharmacometrics modeling tool. (BSD 3-Clause)</li> </ul>"},{"location":"related-software/#r-based-solutions","title":"R-Based Solutions","text":"<ul> <li>PKPDsim \u2013 A package for PK/PD simulations supporting differential equations and stochastic models. (GPL-3.0)</li> <li>mrgsolve \u2013 A model simulation tool designed for population PK/PD analysis. (MIT License)</li> <li>nlme \u2013 A package for fitting nonlinear mixed-effects models, widely used in PK/PD analysis. (Part of R Base, freely available)</li> <li>nlmixr \u2013 A flexible platform for nonlinear mixed-effects modeling, specifically designed for PK/PD applications. (GPL-2.0)</li> <li>rxode2 \u2013 A powerful ODE-based solver for PK/PD and pharmacometrics simulations. (GPL-2.0)</li> <li>Ubiquity \u2013 A modeling framework primarily based in R, designed for PK/PD and systems pharmacology applications. (BSD 3-Clause)</li> </ul>"},{"location":"related-software/#cgui-based-solutions","title":"C++/GUI-Based Solutions","text":"<ul> <li>BioGears \u2013 A C++-based open-source human physiology simulation engine with a Java-based GUI. (Apache-2.0 License)</li> </ul>"},{"location":"related-software/#command-line-based","title":"Command-Line Based","text":"<ul> <li>GNU MCSim \u2013 A Monte Carlo simulation tool written in C that supports differential equation modeling and Bayesian inference. (GPL-2.0)</li> </ul>"},{"location":"related-software/#gui-based-solutions","title":"GUI-Based Solutions","text":"<ul> <li>Open Systems Pharmacology \u2013 A comprehensive open-source suite for PBPK and PK/PD modeling, including:<ul> <li>PK-Sim \u2013 A tool for physiologically based pharmacokinetic (PBPK) modeling. (GPL-2.0)</li> <li>MoBi \u2013 A tool for mechanistic modeling, allowing integration of molecular and cellular processes. (GPL-2.0)</li> </ul> </li> </ul>"},{"location":"related-software/#other-modeling-frameworks","title":"Other Modeling Frameworks","text":"<ul> <li>Heta Project \u2013 A modeling framework for Quantitative Systems Pharmacology (QSP) and Systems Biology.</li> </ul>"},{"location":"related-software/#commercial-proprietary-applications","title":"Commercial &amp; Proprietary Applications","text":"<ul> <li>NONMEM \u2013 Industry-standard software for nonlinear mixed-effects modeling, widely used in population PK/PD studies.</li> <li>Monolix \u2013 A powerful application for model-based PK/PD analysis with a user-friendly interface.</li> <li>SimBiology (MATLAB) \u2013 A comprehensive system for mechanistic PK/PD and systems pharmacology modeling.</li> <li>Phoenix WinNonlin \u2013 A suite for pharmacokinetic analysis and regulatory submissions.</li> <li>PoPy \u2013 A Python-based tool designed for population PK/PD modeling. (Dual-licensed: Free for academic and educational use, commercial license required for industry applications and regulatory submissions)</li> <li>Berkeley Madonna \u2013 A commercial mathematical modeling software for solving differential equations, widely used in pharmacometrics. (Proprietary License)</li> <li>Pumas \u2013 A Julia-based platform for pharmaceutical modeling and simulation. (Proprietary: Free academic use, commercial license required for industry applications.)</li> </ul>"},{"location":"related-software/#suggestions-contributions","title":"Suggestions &amp; Contributions","text":"<p>Notice something missing or an issue in the lists above? Feel free to reach out if you know of a missing pharmacological modeling tool or have a suggestion for an update. We welcome community contributions to enhance the accuracy and usefulness of this resource!</p>"},{"location":"standard/","title":"Standard Model Generators","text":"<p><code>pysb-pkpd</code> includes functions to quickly generate standard one-, two-, and three-compartment PK/PD models.</p>"},{"location":"standard/#model-generators","title":"Model Generators","text":"<ul> <li><code>pkpd.standard.one_compartment_model</code> - Generate a standard one-compartment PK model with an optional PD model as a function of drug concentration in the model <code>CENTRAL</code> compartment. The PK model includes drug clearance from the <code>CENTRAL</code> compartment. API Reference</li> <li><code>pkpd.standard.two_compartment_model</code> - Generate a standard two-compartment PK model with an optional PD model as a function of drug concentration in the model <code>CENTRAL</code> compartment. The PK model includes two comparments (<code>CENTRAL</code> and <code>PERIPHERAL</code>), drug clearance from the <code>CENTRAL</code> compartment, and drug distribution/re-distribution between the <code>CENTRAL</code> and <code>PERIPHERAL</code> compartments. API Reference</li> <li><code>pkpd.standard.three_compartment_model</code> - Generate a standard three-compartment PK model with an optional PD model as a function of drug concentration in the model <code>CENTRAL</code> compartment. The PK model includes three comparments (<code>CENTRAL</code>, <code>PERIPHERAL</code>, and <code>DEEPPERIPHERAL</code>), drug clearance from the <code>CENTRAL</code> compartment, and drug distribution/re-distribution between the <code>CENTRAL</code> and <code>PERIPHERAL</code> compartments and the <code>CENTRAL</code> and <code>DEEPPERIPHERAL</code> compartments. API Reference</li> </ul>"},{"location":"standard/#dose-routes-and-parameters","title":"Dose routes and parameters","text":"<p>The dose route is specified with the <code>dose_route</code> input argument with optional parameters specified via the <code>dose_parameters</code> argument. The options are:</p> <ul> <li><code>'iv-bolus'</code>, no special parameters. Instantaneous IV bolus. Example: <code>dose_route='iv-bolus'</code>.</li> <li><code>iv-infusion</code>, no special parameters. Constant zero-order IV infusion. Note that in this case the dose amount is the infusion rate (amount/time). Example: <code>dose_route='iv-infusion'</code></li> <li><code>oral</code> with <code>dose_parameters</code> <code>'ka'</code> (1st-order rate constant) and <code>'f'</code> (bioavailibility fraction). Linear absorption to model oral or sub-cutaneous depot dose. The <code>dose_parameters</code> are passed in as dictionary. Example: <code>dose_route='oral'</code> with <code>dose_parameters={'ka': 0.01, 'f': 0.75}</code>.</li> </ul>"},{"location":"standard/#setting-the-pd-model","title":"Setting the PD model","text":"<p>PD models are specified with the optional <code>pd_model</code> input argument which takes a nested dictionary. The outer dictionary key specifies the model type while the inner dictionary specifies the model parameters and their values. The options are:</p> <ul> <li><code>'emax'</code> model with parameters <code>'emax'</code> and <code>'ec50'</code>. Example input: <code>pd_model={'emax':{'emax': 2.0, 'ec50':52.4}}</code></li> <li><code>'sigmoidal-emax'</code> with parameters <code>'emax'</code>, <code>'ec50'</code>, and <code>'n'</code>. Example input: <code>pd_model={'sigmoidal-emax':{'emax': 2.0, 'ec50':52.4, 'n':1.1}}</code> </li> <li><code>'linear'</code> with parameters <code>'slope'</code> and <code>'intercept'</code>. Example input: <code>pd_model={'linear':{'slope': 1.4, 'intercept':0.43}}</code></li> <li><code>'log-linear'</code> with parameters <code>'slope'</code> and <code>'intercept'</code>. Example input: <code>pd_model={'log-linear':{'slope': 1.4, 'intercept':0.43}}</code></li> <li><code>'fixed'</code> with parameters <code>'e_fixed'</code> and <code>'c_threshold'</code>. Example input: <code>pd_model={'fixed':{'e_fixed': 4.7, 'c_threshold':100.0}}</code></li> </ul> <p>The associated equations for each PD model are shown in the PD macros descriptions.</p>"},{"location":"standard/#example","title":"Example","text":"<p>One-compartment model with oral administration and an Emax PD model: <pre><code>model = one_compartment_model(\n    100.0,  # mg\n    dose_route=\"oral\",\n    dose_parameters={\n        'ka': 1e-1, # min^-1\n         'f': 0.95,\n    },\n    volume_distribution=10.0,  # L\n    clearance=0.750,  # L/min\n    pd_model={\n        \"emax\": {\n            \"emax\": 2.2,\n            \"ec50\": 50.0,  # mg\n        }\n    },\n)\n</code></pre></p>"},{"location":"supporting/","title":"Supporting","text":"<p>I'm very happy that you've chosen to use pysb-pkpd. This add-on is a project that I develop and maintain on my own time, independently of the core PySB library, and without external funding. If you've found it helpful, here are a few ways you can support its ongoing development:</p> <ul> <li>Star  : Show your support by starring the pysb-pkpd GitHub repository. It helps increase the project's visibility and lets others know it's useful. It also benefits my motivation to continue improving the package!</li> <li>Share  : Sharing <code>pysb-pkpd</code> on your social media, forums, or with your network is another great way to support the project. It helps more people discover <code>pysb-pkpd</code>, which in turn motivates me to keep developing!</li> <li>Cite  : Citing or mentioning this software in your work, publications, or projects is another valuable way to support it. It helps spread the word and acknowledges the effort put into its development, which is greatly appreciated!</li> <li>Sponsor  : Even small financial contributions, such as spotting me the cost of a tea through Ko-fi so I can get my caffeine fix, can make a big difference! Every little bit can help me continue developing this and other open-source projects. </li> </ul> <p></p>"},{"location":"tutorials/","title":"\ud83d\udea7 Page Under Development \ud83d\udea7","text":"<p>Thank you for your interest in our Tutorials section! We\u2019re actively working on expanding these pages to provide step-by-step instructions and hands-on examples for using <code>pysb-pkpd</code>.</p> <p>Our goal is to make these resources clear, practical, and easy to follow\u2014but we\u2019re still in the process of gathering content and refining details.</p> <p>Stay tuned! In the meantime:</p> <ul> <li>See this blog post that introduces PK/PD modeling using PySB and <code>pysb-pkpd</code> with two different case studies.</li> <li>Have a specific question? Feel free to explore our existing documentation or reach out to the community.</li> <li>Want to contribute? If you have suggestions or example workflows, we'd love to hear from you!</li> </ul> <p>Check back soon for updates as we continue to improve these guides!</p>"}]}